<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Practical Elegance]]></title>
  <link href="http://decomplecting.org/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://decomplecting.org/"/>
  <updated>2014-10-24T05:08:58-04:00</updated>
  <id>http://decomplecting.org/</id>
  <author>
    <name><![CDATA[Jason Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Have A Happy #Whyday with whynot]]></title>
    <link href="http://decomplecting.org/blog/2014/08/19/have-a-happy-why-day-with-whynot/"/>
    <updated>2014-08-19T21:26:36-04:00</updated>
    <id>http://decomplecting.org/blog/2014/08/19/have-a-happy-why-day-with-whynot</id>
    <content type="html"><![CDATA[<p>It&rsquo;s August 19th, the day we remember why the lucky stiff&rsquo;s poignant departure
from the internet. <a href="https://github.com/ruby-jokes">ruby-jokes</a> would hate to
part with the <a href="http://whyday.org/">Whyday</a> tradition of hacking on something just for fun and releasing
it into the wild.</p>

<p>So it&rsquo;s with great ambivalence we announce <a href="https://github.com/ruby-jokes/whynot">whynot</a>,
a gem that does irresponsible things because&hellip; why not?</p>

<p>whynot is for when you really just don&rsquo;t care. It started as a single monkey-patch
to <code>Kernel</code>, called <code>maybe</code>. <code>maybe</code> takes a block, and may or may not yield the
result. So for instance:</p>

<p><figure class='code'><figcaption><span>maybe </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;maybe do |x,y,z|</span>
</span><span class='line'><span class="sr">  x,y,z = 1,2,3</span>
</span><span class='line'><span class="sr">  x + y + z</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>About half the time, this will return <code>6</code>. The other half, <code>nil</code>.</p>

<p>About three minutes after I pushed whynot to Github, <a href="https://twitter.com/mi_c_ah">Micah Gates</a>
added some kernel methods that allowed for a little more specificity: <code>mostly</code>,
which will execute your code about 2/3 of the time, and <code>occasionally</code>, which
has about a 1 in 5 chance of actually executing your code.</p>

<h4>But wait, there&rsquo;s more!</h4>

<p>Just in time for the 0.0.4 release this afternoon, I decided sometimes, the truth
doesn&rsquo;t matter. Or, at least, you just don&rsquo;t care. So I added <code>meh</code>. Sometimes
true, sometimes false, whatever. When you really don&rsquo;t care, just do this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;meh ? &amp;ldquo;I guess&amp;rdquo; : &amp;ldquo;Nah.&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I really wanted to create a global value like <code>true</code> or <code>false</code> that was neither
truthy nor falsey, but I&rsquo;m not sure whether that&rsquo;s possible, and I have a feeling
it would require some C-extension hackery if it is.</p>

<p>Perhaps for a future release?</p>

<p>As always, pull requests are welcome, and use at your own risk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New from Ruby Jokes: taint_aliases]]></title>
    <link href="http://decomplecting.org/blog/2014/01/23/new-from-ruby-jokes-taint-aliases/"/>
    <updated>2014-01-23T20:08:13-05:00</updated>
    <id>http://decomplecting.org/blog/2014/01/23/new-from-ruby-jokes-taint-aliases</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/ruby-jokes">Ruby Jokes</a> team has a new gem for you that was designed, tested, and released in about an hour this afternoon: <a href="http://ruby-jokes.github.io/taint_aliases">taint_aliases</a>. You can get the full details <a href="https://github.com/ruby-jokes/taint_aliases">on GitHub</a>, but I thought a friendly introduction might make for an enlightening blog post.</p>

<h3>Grundle Your Objects</h3>

<p>You see, not everyone prefers the word &ldquo;taint&rdquo;. Some people are very clinical, and say &lsquo;perineum&rsquo;. Others prefer &lsquo;grundle&rsquo; or &lsquo;fleshy fun bridge&rsquo;. We wanted to give you options, so <code>taint_aliases</code> makes a variety of synonyms available to you.</p>

<p><img class="center <a" src="href="http://i.imgur.com/7r7Ml5q.png">http://i.imgur.com/7r7Ml5q.png</a>&#8221; title=&#8221;The Most Interesting Taint In The World&#8221; ></p>

<!--more-->


<p>With <code>taint_aliases</code>, you can do things like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;taint_aliases&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;obj.grundle&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span><span class="o">.</span><span class="n">tainted?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;=&gt; true&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Foo</span> <span class="no">Bar</span> <span class="no">Baz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;str.fleshy_fun_bridge&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">str</span><span class="o">.</span><span class="n">tainted?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;=&gt; true&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Of course, there are other options, but you can find them in the documentation.</p>

<h3>Roadmap</h3>

<p>We&rsquo;re currently at version 0.0.3 of <a href="https://rubygems.org/gems/taint_aliases">the gem</a>, but we plan on adding methods like <code>Object#ungrundle</code> and <code>Object#grundled?</code> before the 1.0 release.</p>

<p>Pull requests are welcome, and&hellip; you&rsquo;re welcome.</p>

<p>P.S. Props to <a href="https://github.com/mgates">Micah Gates</a> for work on the codebase and to <a href="https://github.com/milt">Milt Reder</a> for the conception of this gem while we were taking a break at work.</p>

<h3>Update</h3>

<p>Thanks to a well-timed pull request from <a href="https://github.com/threeifbywhiskey">threeifbywhiskey</a>, the milestone listed above has been met, and I just pushed v1.0.0 of the gem. w00t!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Social University That Could Have Been]]></title>
    <link href="http://decomplecting.org/blog/2013/03/10/the-social-university-that-could-have-been/"/>
    <updated>2013-03-10T22:21:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/03/10/the-social-university-that-could-have-been</id>
    <content type="html"><![CDATA[<p>This is a post I&rsquo;ve wanted to write for a while, but I&rsquo;ve needed time and distance to do it justice. This is a post about (from my perspective) the greatest failure of my professional career.</p>

<h2>The Social University</h2>

<p>Sometime in 2011, I was joking with my team lead about connecting <a href="http://www.blackboard.com/platforms/transact/overview.aspx">Blackboard Transact</a>, the OLTP product used for access control, stored value account transactions, and meal plans at my work, to Twitter, just for fun. The short answer was &ldquo;that&rsquo;s silly.&rdquo; The longer answer was &ldquo;that&rsquo;s silly, but it would be pretty neat.&rdquo;</p>

<p>So on lunch breaks and when I was waiting on other things to move forward with my &ldquo;official&rdquo; projects, I played around with creating a system to connect our system to Twitter.</p>

<p>Since I had already worked on a service layer for (really, a generalized SOA for systems connecting to) Transact, it was pretty easy to leverage APIs from not only Twitter, but also Foursquare and Facebook to tie into transactions from our internal system; door access could tweet your location, and check you in on Foursquare; buying a coffee could do the same.</p>

<p>Eventually, the idea gained some traction, and we started building in a system of social gamification, that would award badges and achievements for usage of the system, ranging from customer loyalty rewards for particpating vendors, to seemingly &ldquo;silly&rdquo; things like a &ldquo;Speed Demon&rdquo; achivement for swiping two doors on opposite sides of campus within ten minutes.</p>

<p>The system also allowed students (well, also faculty and staff) to connect to Facebook to share badges/achivements and compete in a university-wide leaderboard. This is just an overview of the social media integration and gamification elements, but you might very well ask, what&rsquo;s the point?</p>

<!--more-->


<h2>The University Lifecycle</h2>

<p>There are three major phases in the lifecycle of the relationship between a university and its students: recruitment, retention, and alumni devleopment.</p>

<p>What this comes down to is attracting students, making sure they stay long enough to graduate, and then soliciting donations from alumni. The brilliance (if I may be pardoned a lapse in humility) of our software was the long-term goal of uniting all three. Students would be able to opt-in to the social media components as soon as they were accepted; the core components (targeted toward current students) would be integrated with their day-to-day activities on cmapus; and participants would be able to remain &ldquo;in the game&rdquo; long after graduation, creating a lasting bond between the university and alumni (far beyond attendance at the occasional lacrosse game).</p>

<p>Our eventual goal was to connect these three phases through social media to make the university experience tightly integrated with the lifetime online experience of students, faculty and staff.</p>

<h2>It&rsquo;s All About The Data</h2>

<p>So, making college more fun and exciting across the three phases of involvement
is well and good, but where does it start to get interesting? In the data.</p>

<p>Once you go beyond the immediate day-to-day, and start harvesting data like
tweets and facebook posts (for sentiment analysis), Foursquare and other
location-based data (to track geographical patterns), and LinkedIn for career
trajectory data, you can start to analyze interesting patterns and create
predictive analyses based on the large volume of voluntarily supplied data.</p>

<p>In the end, it&rsquo;s a positive-sum game; students have a more engaging experience,
the univeristy has a better dataset to analyze to make informed decisions about
resource allocation, recruitment, and alumni giving, and it&rsquo;s a damn fun project
to work on.</p>

<h2>Failure</h2>

<p>Why do I consider this the greatest failure of my professional career?</p>

<p>In some ways, it was a resounding success. Departments from athletics to applied
math were clamoring for it; we were asked to present the project at the annual
conference for Blackboard Transact, and then asked to do an encore (<a href="https://speakerdeck.com/canweriotnow/j-card-social">You can
find the slides here, by the
way</a>). Our student focus
group thought it was one of the best things they&rsquo;d ever seen.</p>

<p>I consider it a failure because we never got to ship. (<a href="http://johndbarry.com/2012/07/if-it-doesnt-ship-it-doesnt-exist/">If it doesn&rsquo;t ship, it
doesn&rsquo;t
exist.</a>) Sure,
it was functional, and even &ldquo;live&rdquo; on our production server for about a week
before our official launch date. But in that last week, the project was
&ldquo;indefinitely shelved&rdquo;.</p>

<p><img class="center" src="/images/post-img/remove-that-code.jpg"></p>

<p>I never really got a clear reason for that (there were meetings between deans
and lawyers and managers to which I was not privy), but the official, documented
reason was that the project itself (which we worked on over the course of a year
or more) was &ldquo;never requested or approved&rdquo;, which is why I&rsquo;m blogging about it
now. I may never be able to share the source code (work-for-hire is pretty
explicit), but I think the idea, which originated with me, should be free to the
world if my employer disavows any ownership of it.</p>

<h2>That Vision Thing</h2>

<p>Okay, this header is the title of an episode from Season 3 of <em>Angel,</em> but I&rsquo;m
also referencing one of the Bible verses my mom likes to quote. It&rsquo;s from
Proverbs, not sure exactly where, but the line is, &ldquo;My people perish for a lack
of vision.&rdquo;</p>

<p>This could be the most relevant prophetic statement to higher education in our
current economic and technological climate. Last year, Sebastian Thrun, Stanford
professor, Google researcher, and founder of <a href="http://udacity.com/">Udacity</a>
famously stated in a <a href="http://www.wired.com/wiredscience/2012/03/ff_aiclass/all/">Wired
article</a> that &ldquo;Fifty
years from now&hellip;there will be only 10 institutions in the whole world that
deliver higher education.&rdquo; My argument is that those will be the insitutions
with the vision to risk everything to remain at the forefront of the
marketplace.</p>

<p>Does allowing students to tweet their lunch purchases accomplish this goal?
Certainly not. But the lack of vision that hedges its bets and plays it safe
certainly does not bode well for the university that wishes to survive the next
several decades.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PAM Authentication Beyond The Desktop]]></title>
    <link href="http://decomplecting.org/blog/2013/03/08/pam-authentication-beyond-the-desktop/"/>
    <updated>2013-03-08T20:11:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/03/08/pam-authentication-beyond-the-desktop</id>
    <content type="html"><![CDATA[<p>The Linux <a href="http://www.linux-pam.org/">PAM</a> (Pluggable Authentication Modules) architecture is one of the most wonderful (and most overlooked) features of the OS. Typically we only consider PAM as handling our console (or xdm/gdm etc. logins) on Linux, but it&rsquo;s useful for so much more.</p>

<h3>Web Authentication</h3>

<p>At work, we needed an authentication solution that allowed users to sign in with their ActiveDirectory credentials. Although the &ldquo;official&rdquo; solution was to use <a href="http://www.ca.com/us/secure-single-sign-on.aspx">SiteMinder</a> for web authentication against AD, we were working on a mobile application, and at the time the SiteMinder auth page was ugly, and had no mobile-optimized login page. The latter problem has since been rectified; now it has both an ugly desktop login and an ugly mobile login. In addition, we were using nginx, and SiteMinder was really only supported under IIS and Apache (and at the time, the latter was via Shibboleth. Ugh.), so without official SiteMinder support, or an nginx Shib plug-in, we were in a bit of a bind.</p>

<p>Around the same time, I was playing with Likewise Open (now known as <a href="http://www.powerbrokeropen.org/">PowerBroker Identity Services &ndash; Open Edition</a>) to bind my Linux workstation into AD. So it occurred to me: if a normal Linux PAM login can be authenticated against ActiveDirectory, why not a PAM login from a web application?</p>

<p>I know, I know, my first though should have been LDAP, right? For some unknown reason, LDAP was verboten at the time. The policy has since (apparently) been reversed, but such is the ebb and flow of corporate politics. And so, in the grand tradition of one of the mothers of modern computer science (and one of my daughter&rsquo;s namesakes):</p>

<p><blockquote><p>If it&rsquo;s a good idea, go ahead and do it. It is much easier to apologize than it is to get permission.</p><footer><strong>Rear Admiral Dr. Grace Murray Hopper</strong></footer></blockquote></p>

<!--more-->


<p>My first obstacle was to figure out how to do this from Ruby. <a href="https://github.com/binarylogic/authlogic">Authlogic</a> is a decent authentication framework (Sure, Devise is newer, but there&rsquo;s nothing wrong with Authlogic). There&rsquo;s an <a href="https://github.com/jhu-idcs/authlogic_pam">authlogic_pam</a> plugin (link is to my updated version, original seems to be abandoned), so the main issue was updating the long-abandoned rpam gem to tie into PAM. So I created <a href="https://github.com/canweriotnow/rpam-ruby19">rpam-ruby19</a> to have a C extension compatible with Ruby ~>1.9.2. Once the server (all of our production servers are <a href="http://www.debian.org/releases/stable/">Debian 6 &ldquo;Squeeze&rdquo;</a>) was tied into AD, it was relatively trivial to create a login that used Authlogic to hit PAM (and thusly ActiveDirectory) for user authentication.</p>

<h3>But now everyone has a server login?</h3>

<p>No, not at all. Likewise/PBIS has a setting to change the login shell for <em>only</em> AD users; we simply changed their shell to <code>/bin/true</code>. Problem solved.</p>

<h3>And that forgiveness/permission thing?</h3>

<p>While we were in beta, we informally ran the auth scheme by the people directly responsible for such things. They actually thought it was pretty cool and innovative. Which just reinforces my dedication to the timeless wisdom of Dr. Hopper.</p>

<h3>And so&hellip;</h3>

<p>Since we implemented this auth scheme for our mobile app, we&rsquo;ve continued to go with it; it&rsquo;s simple, elegant, and shields us from capturing (even hashed) credentials. We have two(-ish) new products launching this year using the same auth scheme. And we&rsquo;re still quite satisfied with the results.</p>

<h3>Caveats</h3>

<p>Over the past couple of months, I&rsquo;ve been researching an <a href="https://github.com/canweriotnow/rpam-ruby19/issues/5">issue submitted on Github</a> documenting a problem authenticating local users other than the euid running the process. You can get the details from the link, but this is how PAM (or at least shadow passwords) are supposed to work. This isn&rsquo;t for authenticating local system accounts (at least not if you&rsquo;re using shadow passwords properly); you should only auth external accounts (LDAP, ActiveDirectory, maybe NIS+) through PAM for non-system-login applications.</p>

<h3>Future</h3>

<p>Since this has worked out so well with our Rails apps, I&rsquo;m now working on a Clojure equivalent. There&rsquo;s a PAM integration library for Java called JPam, which I&rsquo;ve started wrapping in a library called <a href="https://clojars.org/clj-pam">clj-pam</a>, available from Clojars. If you&rsquo;d like to help, the source repo is located <a href="https://github.com/canweriotnow/clj-pam">here on Github</a>.</p>

<p>PAM is wonderfully extensible. It&rsquo;s also very configurable, and is worth leveraging whenever possible. Dig deeper. Linux has so many great little pieces we tend to overlook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Typos Got You Down? Stop Worrying with close_enough]]></title>
    <link href="http://decomplecting.org/blog/2013/03/01/code-typos-got-you-down-stop-worrying-with-close-enough/"/>
    <updated>2013-03-01T18:32:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/03/01/code-typos-got-you-down-stop-worrying-with-close-enough</id>
    <content type="html"><![CDATA[<p>From the crack team (<a href="https://twitter.com/micahjgates">Micah Gates</a> and <a href="https://twitter.com/canweriotnow">myself</a>) that brought you <a href="https://github.com/ruby-jokes/job_interview">job_interview</a>, I&rsquo;m proud to announce the availability of <a href="https://github.com/ruby-jokes/close_enough">close_enough</a>, a gem that will save you from all of those niggling <code>NoMethodError</code>s that occur when you mis-type a method name.</p>

<p>The concept is very simple, and based on an algorithm used in most spell checkers and autocorrect systems currently in use. Calculating the <a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance">Damerau-Levenshtein distance</a> between two words can reliably (within a certain margin of error) indicate whether a known word was inteded when an unknown term was encountered in user input.</p>

<p>In Ruby, we have a wonderful metaprogramming facility in <code>method_missing</code>. What we&rsquo;ve done in close_enough is to monkey-patch <code>method_missing</code> on <code>Object</code> to calculate the Demerau-Levenshtein distance between existing methods and the non-existent called method, and invoke the nearest one if it&rsquo;s &ldquo;close enough&rdquo; (close enough currently being an edit distance of &lt; 3).</p>

<!-- more -->


<h2>So how does it work?</h2>

<p>It&rsquo;s pretty straightforward. Let&rsquo;s say you&rsquo;re speed typing, maybe on an unfamiliar keyboard (I use a Sun Type 5 at home, but usually Dell QuietKeys at work&hellip; very different layout and key responsiveness). Sure, typos are going to happen, and it can be annoying and slow you down. But with close_enough&hellip;</p>

<p><figure class='code'><figcaption><span>Close Enough Examples </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;close_enough&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">closs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;=&gt; Object&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;str.lentgh</span>
</span><span class='line'><span class="sr">=&gt; 3&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">str</span><span class="o">.</span><span class="n">reserve</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oof</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ary = [1,2,3,4,5]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">ary</span><span class="o">.</span><span class="n">mpa</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ary.reduck(:+)</span>
</span><span class='line'><span class="sr">=&gt; 15&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It&rsquo;s that easy. Quick, inaccurate typing becomes a non-issue. Or, at least, a minor issue. Okay, really, you should never use this in any kind of production environment.</p>

<p>It&rsquo;s available from <a href="https://rubygems.org/gems/close_enough">Rubygems</a>, and the source is on <a href="https://github.com/ruby-jokes/close_enough">Github</a>.</p>
]]></content>
  </entry>
  
</feed>
