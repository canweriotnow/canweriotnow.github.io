<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Practical Elegance]]></title>
  <link href="http://decomplecting.org/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://decomplecting.org/"/>
  <updated>2013-10-01T04:37:02-04:00</updated>
  <id>http://decomplecting.org/</id>
  <author>
    <name><![CDATA[Jason Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maybe EdTech Is Another Leaky Abstraction]]></title>
    <link href="http://decomplecting.org/blog/2013/09/30/maybe-edtech-is-another-leaky-abstraction/"/>
    <updated>2013-09-30T20:26:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/30/maybe-edtech-is-another-leaky-abstraction</id>
    <content type="html"><![CDATA[<p>Working in the EdTech sector, I&rsquo;m perpetually vexed as I try to determine what exactly &ldquo;EdTech&rdquo; is and, <em>a fortiori,</em> what <em>effective</em> EdTech should look like. Perhaps a little background might be in order.</p>

<p>As I&rsquo;ve mentioned before, my academic training is in philosophy. Computer Science was more of an avocational intellectual pursuit because I enjoyed math and symbolic logic. Life is full of surprises, eh?</p>

<p>One of the fundamental divisions in philosophy is between &ldquo;analytic&rdquo; and &ldquo;continental&rdquo; philosophy. These are vague and overlapping spheres, but the reduction comes down to whether philosophy is the handmaiden of science (analyitc school), or whether philosophy is something larger with a complex (sometimes supportive, sometimes critical) relationship with science.</p>

<p>I fell firmly on the &ldquo;continental&rdquo; side, for the most part. It was always the critical power of philosophy that fascinated me. So, what does this have to do with EdTech?</p>

<!--more-->


<h3>Technology as the Handmaiden of Education</h3>

<p>This is the problem. Our typical view of &ldquo;educational technology&rdquo; is that we can produce technological tools to support the same tried, tired pedagogical techniques that have (sort of) worked (for a minority of the population) for decades.</p>

<p>This is wasteful. This is stupid, and also wrong.</p>

<p>In business, where technology has succeeded it has done so because it has revolutionized practices, made redundant unnecessary labor, and increased efficiency by many orders of magnitude. I&rsquo;ll (graciously) bracket off my opinions about the unfair distribution of the gains in productivity, for the sake of brevity and focus.</p>

<p>Likewise in science, our rate of accumulation of knowledge about the physical world has increased exponentially, not because we have expected technology to serve the same processes that we accepted as &ldquo;best practices&rdquo; back when we had only stone knives and bear skins to work with, but because the rate of technological progress has disrupted (improved) the very processes by which scientific discovery occurs.</p>

<p>Now, as (to borrow from both Marcuse and Heidegger) technology is very specifically the <em>science</em> of <em>technics,</em>
it might be argues that the sciences are the least &ldquo;disrupted&rdquo; by technological advancement; for the most part, they are themselves advanced. But paradigm shifts in technology have played a role in the Kuhnian paradigm shifts in scientific understanding as well.</p>

<h3>And Education?</h3>

<p>First, let us agree that education is no science, not even a &ldquo;soft science&rdquo; like sociology or psychology. to be sure, at its best it is informed heavily both by those soft sciences as well as slightly harder sciences like cognitive science, for example. But education itself is no science.</p>

<p>In this regard, scientific and technolological advances should in and of themselves present a material critique of the process of pedagogy as it is practiced; technology is the ultimate tool for cultural transformation, if not (ultimately) the transformation of the meaning of what it is to be human.</p>

<p>Fundamentally, when correctly utilized, technology is transformative. And that&rsquo;s not what we&rsquo;re seeing with EdTech.</p>

<p>Smartboards, blended learning, flipped classrooms, Blackboard, Moodle, an iPad for every student, I would go on but you can get better buzzwords from the <a href="http://www.teacheripsum.com/">Teacher Ipsum</a> generator. It&rsquo;s pretty much all a bunch of overpriced junk that supports the Same Old Shit in the classroom, with the added benefit of shiny tech press for the school, the district, whatever.</p>

<p>I&rsquo;m not playing down the role of technology in education. Quite the opposite, in fact. I&rsquo;m lamenting that billions of dollars are being spent on &ldquo;EdTech&rdquo; that isn&rsquo;t impactful, that isn&rsquo;t transformative, that simply lends the sheen of shiny tech to tired pedagogy that should have been retired decades ago.</p>

<h3>What Is To Be Done?</h3>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>In the title, I suggested that &ldquo;EdTech&rdquo; is a &ldquo;leaky abstraction.&rdquo; The term comes from an article by <a href="http://www.joelonsoftware.com/AboutMe.html" title="Joel Spolsky">Joel Spolsky</a> entitled <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" title="Leaky Abstractions">&ldquo;The Law Of Leaky Abstractions&rdquo;</a>. The tl;dr is: all (non-trivial) abstractions are, to some degree, leaky; that is, they build on top of something concrete and messy while removing the messy details from the public interface. At least, that&rsquo;s how we&rsquo;d describe it in the software world. Grasping to define something like &ldquo;EdTech&rdquo;, I think the parallel I&rsquo;d like to draw is that the very term &ldquo;EdTech&rdquo; contains what it cannot possibly contain (bonus points if you catch that reference). &ldquo;Educational Technology&rdquo; refers to technology <em>designed for</em> education, technology <em>used in the serivce of</em> education, and also technology tangentially related to education. Unfortunately, this is a boolean <code>and</code>, leaving us with the union of >= 3 overlapping sets, wherein the intersections and complements are probably more interesting. The union of the sets contains many subsets that really aren&rsquo;t all that useful or interesting. But we don&rsquo;t seem to be doing much winnowing.</p>

<p>Back to the philosophy lesson: technology is not there to be the handmaiden of tried and tired pedagogy. Technology is there to, in its very essence, provide an <em>explicit critique</em> of pedagogy in general.</p>

<p>So how do we fix this?</p>

<p>We need better ways of evaluating technology in education. We need professional development solutions to ensure that educators have the skills to properly exploit the tech they have available. We need to ditch our preconceptions about what it means to teach any given subject and look at how technology has changed that domain in the real world (technophobic math teachers, I&rsquo;m looking at you!).</p>

<p>We need to forget everything we know about education, and reinvent everything with the new tools at hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of The "IT Department"]]></title>
    <link href="http://decomplecting.org/blog/2013/03/15/the-myth-of-the-it-department/"/>
    <updated>2013-03-15T01:53:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/03/15/the-myth-of-the-it-department</id>
    <content type="html"><![CDATA[<p>So in the comments on my <a href="/blog/2013/03/11/confessions-of-a-job-destroyer/">last post</a> I mentioned my fandom for what is, in my opinion, the most insightful and important blog currently published, that of <a href="http://michaelochurch.wordpress.com/">Michael O. Church</a>. His recent series of posts have been reviewing and analyzing the MacLeod theory of <a href="http://michaelochurch.wordpress.com/2013/03/14/gervais-macleod-9-convexity/">organizational structure</a> (link is to the latest post in the series, but if you haven&rsquo;t been following it, therein are links to the previous eight).</p>

<p>I want to focus on the differential between concave (in which the difference between failure and middling is greatest) and convex (in which the difference between middling and superior is greatest) work.</p>

<h3>The &ldquo;IT Department&rdquo;</h3>

<p>I have to start by saying &ldquo;Information Technology&rdquo; is a leaky abstraction. It covers everything from internal software development to the help desk call center. I&rsquo;m not suggesting that either line of business is superior. Both are absolutely necessary, at least until developers start to become psychic or users stop being stupid, or (preferably) both.</p>

<p>The real problem comes when the same management structure is imposed in the guise of an &ldquo;IT Department&rdquo; on such divergent areas as the help desk, desktop support, network engineers, developers, and hardware techs. Going beyond theories <a href="http://michaelochurch.wordpress.com/2013/03/12/gervais-macleod-8-human-nature-theories-x-y-z-and-a/">X, Y, Z, or A</a> of management, having a &ldquo;Central IT&rdquo; department is (without a revolutionary management strategy that will probably raise HR issues for most entrenched organizations) an attempt to shoehorn concave and convex work into the same tiny box, and is going to fail at appropriately managing one or the other (or perhaps more likely, both).</p>

<!--more-->


<h3>Concave Work</h3>

<p>Let&rsquo;s face it, help desk work is typically concave. I&rsquo;ve done it (briefly), and it&rsquo;s probably an acceptable use case for <a href="http://en.wikipedia.org/wiki/Theory_X_and_Theory_Y#Theory_X">Theory X</a>, since it&rsquo;s (in this writer&rsquo;s opinion) rote, unrewarding work that I would <a href="/blog/2013/03/11/confessions-of-a-job-destroyer/">automate out of existence</a> if I had the time and resources. But, it&rsquo;s also necessary work, and a place where &ldquo;managing to the middle&rdquo; works because achieving the Socially Acceptable Middling Effort (SAME) is a decent departmental average.</p>

<p>I&rsquo;d place much of the responsibility of the average sub-division of IT in the scope of &ldquo;concave work.&rdquo;  Desktop support, Windows administration, etc., are really about uniformity of outcome, and SAME is an acceptable goal.</p>

<p>When it comes to efforts like software development, or big data, or even &ldquo;cloud services&rdquo;, SAME is the same as failure. We&rsquo;re now into the realm of convex work, and the standard has to be different.</p>

<h3>Convex Work</h3>

<p>I&rsquo;ve <a href="/blog/2012/10/31/feedback-loops/">written before</a> about how programmers are just <em>weird</em> from a standard, organizational point of view. Or any standard point of view. Programming is the ultimate convex work; from Joel Spolsky&rsquo;s warnings about <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">The Perils of Java Schools</a>, to Jeff Atwood&rsquo;s plea that <a href="http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html">not everyone learn to code</a>, it&rsquo;s clear that not only is programming a highly specialized thing to excel at, but also that there are <a href="http://www.codinghorror.com/blog/2006/07/separating-programming-sheep-from-non-programming-goats.html">certain factors that determine capability in advance</a>.</p>

<p>It&rsquo;s probably the epitome of convex work. The difference between the worst programmer and the middling programmer is a fraction of the difference between a middling programmer and (even) a 90th percentile-or-above programmer. And there are probably other areas in IT where this is true; from my experience I&rsquo;d say they&rsquo;re in software-heavy areas like managing large datasets properly, or providing true &ldquo;cloud services&rdquo;, i.e., computing and storage in a multi-tenancy environment with computation and storage as a metered service. I haven&rsquo;t seen any of these done well in an &ldquo;enterprise&rdquo; environment.</p>

<h3>The Enterprise</h3>

<p>The &ldquo;enterprise&rdquo; only works by &ldquo;managing to the middle.&rdquo; Which explains the self-defeating attitutdes of vendor lock-in and risk aversion. When you&rsquo;re not in a &ldquo;tech company,&rdquo; IT is invariably a &ldquo;cost center,&rdquo; which a) is why <a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/">you shouldn&rsquo;t call yourself a programmer</a> (obligatory reference), and b) why it needs to maintain a low-risk profile. When you work for a large organization, &ldquo;low-risk&rdquo; means &ldquo;the buck stops elsewhere than my desk.&rdquo;  So there needs to be a vendor to blame. So much of the acknowledged efforts will be in contract negotiations for the purchase of almost-suitable software from an established vendor, that doesn&rsquo;t really meet the needs of the organization, but can be marginally tweaked to fit by middling engineers.</p>

<p>It also means that internal innovation can&rsquo;t be acknowledged or rewarded too highly. When most of your &ldquo;software teams&rdquo; are doing maintenance on the last failed vendor purchase, how can you be seen to give accolades to the projects which have truly broken new ground?</p>

<p>At the same time, do you <em>want</em> front line support innovating to that degree? Sure, if one of your help desk reps replaces some annoying customer interaction with a Perl script, they&rsquo;ll either be promoted to convex work, or fired from concave work, right? I think this only reinforces the difference between the two categories.</p>

<h3>Programmer, Wat Do?</h3>

<p>That&rsquo;s where the <a href="http://michaelochurch.wordpress.com/2013/02/19/gervais-principle-questioned-macleods-hierarchy-the-technocrat-and-vc-startups/">MacLeod Paradigm</a> really comes into play again&hellip; when most of your developers are 9-to-5ers who <a href="http://decomplecting.org/blog/2012/05/22/passion/">take no joy in their craft</a>, you have a team of MacLeod &ldquo;losers,&rdquo; which fits perfectly well into the &ldquo;enterprise&rdquo; IT paradigm. It&rsquo;s hard to practice something sensible like <a href="http://michaelochurch.wordpress.com/2012/11/25/programmer-autonomy-is-a-1-trillion-issue/">open allocation</a> when you manage business analysts in the same manner as developers.</p>

<p>If you really care about good, clean, beautiful, (even) elegant code, well&hellip; you might luck out. I&rsquo;m on a small team which is probably considered &ldquo;rogue&rdquo; by most &ldquo;enterprise&rdquo; standards. I love my job, and it affords me significant autonomy and creative freedom, but I also know how bizarre and rare that is. I don&rsquo;t see how &ldquo;non-technical organizations&rdquo; (a future post will debate whether such a thing exists anymore) can afford to treat developers' work the same as concave work without having the whole house of cards come tumbling down at some point.</p>
]]></content>
  </entry>
  
</feed>
