<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Practical Elegance]]></title>
  <link href="http://decomplecting.org/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://decomplecting.org/"/>
  <updated>2013-11-12T23:42:51-05:00</updated>
  <id>http://decomplecting.org/</id>
  <author>
    <name><![CDATA[Jason Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking (Part 2)]]></title>
    <link href="http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2/"/>
    <updated>2013-11-13T00:09:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2</id>
    <content type="html"><![CDATA[<h3>The Important Stuff</h3>

<p>So <a href="/blog/2013/11/12/just-get-hacking/">last post</a>, I pretty much said &ldquo;just do it,&rdquo; and explained that the companies you <em>want</em> to hire you will care less about your background than your demonstrable coding skills.</p>

<p>In this post, I want to look a little more closely at the skills that matter, and the specific areas that the &ldquo;best&rdquo; (IMHO) companies will focus on. I may be biased, but this is the stuff I care about when I&rsquo;m interviewing developers (beyond basic coding chops), and I think I&rsquo;m pretty smart.</p>

<h3>Testing, Testing, Testing</h3>

<p>So you&rsquo;re writing code that runs, runs correctly, and runs consistently. That&rsquo;s awesome. But when it comes to writing production code for a real company, you need to <em>know</em> it&rsquo;s correct, in advance. Especially with dynamic languages, when there&rsquo;s no compiler to refuse to build faulty code, testing is paramount.</p>

<p>So when you&rsquo;re working on these little personal projects, and throwing them on <a href="https://github.com">Github</a>, do a few things:</p>

<!-- more -->


<ul>
<li>Write tests. If you&rsquo;re using Ruby, I recommend <a href="http://rspec.info/">RSpec</a>.</li>
<li>Use <a href="https://travis-ci.org/">Travis CI</a>. You&rsquo;ll learn about <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>, and it&rsquo;s free for open source.</li>
<li>Use <a href="https://codeclimate.com/">Code Climate</a>. It&rsquo;s like automated code review, and also free.</li>
<li>Try <a href="https://coveralls.io/">Coveralls</a>. It&rsquo;ll help you make sure you actually are testing everything.</li>
</ul>


<p>Plus Travis, Code Climate, and Coveralls will give you little badges for your README.md on Github so you can see how your project is doing at any time.</p>

<p>Read up on practices for <a href="http://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</a>, because it matters to the people you really want to work for, and as an aspiring software craftsman, it needs to matter to you.</p>

<h3>Collaboration</h3>

<p>I mentioned the importance of coding with others last post, but I can&rsquo;t emphasize it enough. Look for opportunities for pair programming, even if it&rsquo;s remote. There are cool apps you can use for that now, like <a href="https://koding.com/">Koding</a> (and others), but in a pinch there&rsquo;s always <a href="http://www.vim.org/">vim</a> and <a href="http://tmux.sourceforge.net/">tmux</a>&hellip; which are tools you&rsquo;ll want to know anyhow.</p>

<p>And which brings me to my next point&hellip;</p>

<h3>Unix or GTFO</h3>

<p>Yeah, code is more portable than it has ever been. You can develop Ruby or Clojure or Node.js on Linux, Solaris, OS X, Windows, probably even Haiku&hellip; but you need to understand your deployment environment, which is going to be some kind of *nix unless you&rsquo;re doing .NET (which you&rsquo;re clearly not, if you came to me for advice).</p>

<p>In addition, the closer your dev environment is to your production environment, the less risk there is of weird heisenbug inconsistencies.</p>

<p>So learn <em>some</em> kind of *nix, whether it&rsquo;s OS X, Linux, or Solaris, or whatever. And dig down; use the command line. Learn your tools, learn the <code>git</code> command line, don&rsquo;t just rely on the Github GUI apps etc. Learn <code>bash</code> or <code>zsh</code>. Learn how a combination of <code>find</code>, <code>grep</code>, and <code>xargs</code> can save your ass. It&rsquo;ll make your life easier as a developer, and it&rsquo;s vital when it comes to&hellip;</p>

<h3>DevOps</h3>

<p>Long ago, in a galaxy far, far, away, developers simply wrote application code and the systems that hosted and served that code were managed by a cabal of wizened neckbeards of the Sysadmin clan. Now, in our more enlightened (or is it benighted?) age, development and operations have blurred their lines and DevOps was born.</p>

<p>In many cases, this is just an excuse for developers to be burdened with sysadmin duties; sometimes, it&rsquo;s perfectly sensible as many of the best deployment options are SaaS (Something-as-a-Service) thingamabobs. But it&rsquo;s important to get at least the basics.</p>

<p>So when you&rsquo;re looking for someplace to put your pet project web apps, put them on <a href="http://heroku.com">Heroku</a>. It&rsquo;s free for a single web dyno and no workers, and many of the &ldquo;add-ons&rdquo; (like Postgres, Redis, ElasticSearch, etc.) that are technologies you might want to play with have free tiers as well.</p>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> is Level 80 territory as far as I&rsquo;m concerned, but if you get into the DevOps thing, and want to experiment with tools like <a href="http://www.opscode.com/chef/">Chef</a>, they&rsquo;ll also give you some free time with EC2 instances to play around.</p>

<h3>Summary</h3>

<p>It all comes down to &ldquo;Just Get Hacking&rdquo;. But there are some specifics prereqs for modern software engineering, and if you can make yourself pick those up along the way, all the better. Keep it fun, and keep learning. That&rsquo;s what matters most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking]]></title>
    <link href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/"/>
    <updated>2013-11-12T00:27:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/12/just-get-hacking</id>
    <content type="html"><![CDATA[<p><em>This post is a follow up to a previous entry, <a href="/blog/2013/09/29/letter-to-a-young-or-new-programmer/">&ldquo;Letter to a Young (Or New) Programmer&rdquo;</a>.</em></p>

<p>So you&rsquo;ve been working through some of those excellent online resources, like <a href="http://learncodethehardway.org/">Learn Code The Hard Way</a>, or <a href="http://codeschool.com">Code School</a>, or whatever. You think you can build something now, and you want to get out there in the world and hack things better, but there&rsquo;s this one little problem&hellip; you have a degree in Philosophy or Psychology or no degree at all, and no résumé-worthy coding experience.</p>

<h4>Not. A. Problem.</h4>

<p>Well, not necessarily a problem. There&rsquo;s an easy solution. Just. Get. Hacking.</p>

<p>So you don&rsquo;t know about XP, Agile, Scrum, Kanban, Waterfall&hellip; there&rsquo;s always <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>.</p>

<p>So you haven&rsquo;t built an Enterprise Expert System with the AbstractVisitorFactoryAntiPatternCringeGenerator pattern&hellip; I told you to make an account on <a href="https://github.com">Github</a>, didn&rsquo;t I? And I know you take my advice because you&rsquo;re building actual goddamn software.</p>

<p>Put your stuff on Github. Ask for help on IRC.</p>

<p>Find projects that interest you, fork &lsquo;em, submit pull requests. Lots of projects even have issues labeled as &ldquo;suitable for n00bs&rdquo;.</p>

<!-- more -->


<h4>The Enterprise Dilemma</h4>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Any shop worth working at cares so much more about your coding chops, your potential, your intelligence than bullshit like résumés and academic credentials that if you can demonstrate your ability and still don&rsquo;t get the job, it&rsquo;s a blessing.</p>

<p>On the other hand, you <em>do</em> need a first coding job. And if you&rsquo;re not getting it based on your Github activity, you&rsquo;re probably getting it based on nepotism.</p>

<p>How does this happen? Still goes back to Github, IRC, meetups, etc. So go to some meetups. Talk to people, go to the pub nights, go to the open hack nights. Hack on open source projects, submit pull requests, get in on some projects that will get you recognized. Eventually, you&rsquo;ll have hacker friends who will hire you or recommend you to take over their shitty Enterprise jobs that you can use to build your résumé should you go down that route. It&rsquo;s not that hard. Hang out with nerds, learn the craft, make connections. Programming is one of the few fields where it really is <em>what you know,</em> but who you know can help too. But those connections are best made by being a badass hacker.</p>

<h4>Open Source is the Key</h4>

<p>At the end of the day, though, even if you do all sorts of networking at confs and meetups and the like, you need a strong presence in the Open Source community. I can&rsquo;t emphasize this enough: <strong>PUT YOUR CODE ON GITHUB.</strong></p>

<p>Or Bitbucket or whatever if you prefer, but open source that shit, get other people involved, and get involved in other people&rsquo;s projects.</p>

<p>I&rsquo;m in the position of having to evaluate and hire developers at <a href="http://anestuary.com">An Estuary</a>, and since I want to run the dev shop I wish existed, I&rsquo;m trying to hire that way. When we list positions, we require a Github URL because I want to see what you do, not what your former employers think of you. I assume they&rsquo;re &ldquo;former&rdquo; (or soon-to-be &ldquo;former&rdquo;) for good reason. When we interview you, I want to talk about your code, not your former supervisor&rsquo;s probable inferiority complex.</p>

<p>In summary, just get hacking. Just keep hacking. Build cool shit. Show it to the world. Talk to other nerds. Maybe try some remote pairing (Tweeting with the hashtag #pairwithme is often productive). But just make stuff. Then show me what you can do when you want a job. If you start off with a great company, that should be all you need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Letter to a Young (Or New) Programmer]]></title>
    <link href="http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer/"/>
    <updated>2013-09-29T00:15:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer</id>
    <content type="html"><![CDATA[<p>I get it. You went to college, graduated, got a job, and it&rsquo;s not what you wanted, hoped for, or whatever. Or maybe you&rsquo;ve been in the same job for years, and it&rsquo;s just no fun anymore. And you look at your friends who are hackers. Yeah, we&rsquo;re anti-social, maybe kinda jerks, but we have <em>so much fun</em> at work, and get pretty well compensated for <em>playing.</em></p>

<p>And maybe you think, &ldquo;I&rsquo;ll go back to school and get a second B.S. in Computer Science!&rdquo;</p>

<p>Chill out.</p>

<p>Maybe you&rsquo;re just guessing this whole software thing is for you and you can&rsquo;t wait to get started!</p>

<p>Chill out.</p>

<p>I&rsquo;m going to encourage you, don&rsquo;t get me wrong. But I&rsquo;m also going to encourage you to be realistic. Because I want you to be successful, not just to sprint down a blind alley. We&rsquo;ll get through this, together.</p>

<h3>Lower your expectations</h3>

<p>Look, it&rsquo;s not all rainbows, lollipops and gumdrops. It&rsquo;s not. For me, coding is a pleasure and a privilege, but it&rsquo;s not for everyone. There are <em>extremely shitty jobs</em> out there, doing what I do, and just because I&rsquo;m on cloud nine, doesn&rsquo;t mean you will be.</p>

<p>Furthermore, even though it&rsquo;s a demand-side market (there are far more job openings than talented developers), the really great jobs are still competitive as hell.</p>

<h3>Still here?</h3>

<p>I haven&rsquo;t dissuaded you? Good. Good, young padawan.</p>

<!-- more -->


<p>Since (for the couple of people toward whom this post is targeted directly) I haven taken it upon myself to train you as your Jedi master, I&rsquo;m going to point you toward <a href="http://ruby-lang.org" title="Ruby">Ruby</a> as your first language. It&rsquo;s not a perfect language, but it is beautiful, and presents a useful paradigm (object-oriented programming) in the purest form possible. So let&rsquo;s start with some Ruby resources.</p>

<p>Here&rsquo;s your pre-frosh curriculum:</p>

<ul>
<li><a href="http://tryruby.org" title="Try Ruby">Try Ruby</a> &ndash; Learn the basics, in your browser!</li>
<li><a href="http://ruby.learncodethehardway.org/" title="Learn Ruby The Hard Way">Learn Ruby The Hard Way</a> &ndash; Zed Shaw is (maybe) a jerk, but his books are good. This is a good (free) place to start.</li>
<li><a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> &ndash; Once you&rsquo;ve got a little under your belt, <a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> is your next step to make sure you&rsquo;ve got the basics under your belt.</li>
</ul>


<h3>Really? <em>Still</em> Interested?</h3>

<p>That&rsquo;s fuckin' awesome. I&rsquo;m really happy you&rsquo;re still into this.</p>

<p>Now I get to knock you on your ass, grasshopper. Hopefully you&rsquo;ve read my blog (or know me) enough to know how I feel about learning to build &ldquo;apps&rdquo; without a firm grounding in the fundamentals of computer science. So we&rsquo;re going address this right the hell now.</p>

<p>See, you didn&rsquo;t major in Computer Science. That&rsquo;s okay, niether did I. But that doesn&rsquo;t mean you get a pass on it. We&rsquo;re going to look at some resources to get you the grounding you need to really get up to snuff on the shit you&rsquo;d better know if you want to be a Real Programmer™.</p>

<p>Let&rsquo;s get started.</p>

<p>The first thing you need is math. I&rsquo;m not talking your standard college Calculus or Algebra stuff, but the Real Math you need as a real programmer. So here&rsquo;s the deal: read <a href="http://en.wikipedia.org/wiki/Concrete_Mathematics" title="Concrete Mathematics">Concrete Mathematics</a>.</p>

<p><img class="[float-right] <a" src="href="http://ecx.images-amazon.com/images/I/518GBVWEBYL.jpg">http://ecx.images-amazon.com/images/I/518GBVWEBYL.jpg</a>" title="Concrete Mathematics" ></p>

<p>This book, let me tell you, it was co-written by <a href="http://en.wikipedia.org/wiki/Donald_Knuth" title="Donald Knuth">Knuth</a>, because, let me tell you, Knuth weighed all the extant math texts in the balance and found them lacking. And if Knuth finds you lacking&hellip; jsut go home. This book tricks you into learning both algorithmic estimation and recursion in chapter one and never looks back. It is indispensible.</p>

<p>Next, you need to grok a few things: computability theory, Turing machines, syntax and semantics, etc. Once upon a time, I would have shoved a copy of <a href="http://mitpress.mit.edu/sicp/" title="SICP">The Structure and Interpretation of Computer Programs</a> in your face so fast, it would have made your head spin.</p>

<p><img class="[float-right] <a" src="href="http://upload.wikimedia.org/wikipedia/en/9/9d/SICP_cover.jpg">http://upload.wikimedia.org/wikipedia/en/9/9d/SICP_cover.jpg</a>" title="SICP" ></p>

<p>But, young padawan, I&rsquo;ve decided to ease you into your Jedi training, and we&rsquo;ve settled on Ruby as your focus of practice before you graduate to the full Lisp light saber, so let&rsquo;s consider an alternative.</p>

<p><a href="http://oreilly.com/" title="O'Reilly">O'reilly</a> recently published an excellent intro to CS book called <a href="http://shop.oreilly.com/product/0636920025481.do" title="Understanding Computation">Understanding Computation</a>, which covers about half the material in SICP, but in Ruby, and probably more acessibly than SICP (aka The Wizard Book), especially since you (by now) have a passing familiarity with Ruby.</p>

<p>So let&rsquo;s see&hellip; we&rsquo;ve got you started on Ruby, given you some good resources on the basics of CS, and you&rsquo;re on your way&hellip; what next?</p>

<h3>Resources</h3>

<p>Now we get into the areas where you&rsquo;re exploring on your own, and just coming back to me for help and guidance. Congratualtions! You&rsquo;re nearly ready to graduate to a full Jedi.</p>

<p>Let&rsquo;s see what&rsquo;s available.</p>

<ul>
<li><a href="http://codeschool.com/" title="Code School">Code School</a> is really great, and completely worth the US$25 a month they charge for their entire course catalog.</li>
<li><a href="http://coursera.com/" title="Coursera">Coursera</a> has great CS classes, not typically Ruby based, but you&rsquo;ll learn some core concepts that will be extensively useful.</li>
<li><a href="http://codecademy.com/" title="Codecademy">Codecademy</a> has free courses, of varying quality.</li>
<li><a href="http://betamore.com/academy/" title="Betamore Academy">Betamore Academy</a> has 10-week courses here in Baltimore that will bootstrap you pretty well as a developer, as well as providing networking opportunities to find internships and jobs.</li>
</ul>


<p>I&rsquo;ll try to update this in the future. And you know you can always get in touch and I&rsquo;m more than happy to give you a hand. There&rsquo;s nothing more exciting to me than smart folks falling in love with coding. Happy trails, bro, and remember to keep it fun.</p>

<p><em>Update: I&rsquo;ve posted a follow-up at <a href="/blog/2013/11/12/just-get-hacking/">&ldquo;Just Get Hacking&rdquo;</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're Not Ready To Teach Kids To Code]]></title>
    <link href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/"/>
    <updated>2013-06-02T23:22:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code</id>
    <content type="html"><![CDATA[<h2>Think Kids Should Learn To Code? Teach The Teachers First</h2>

<p>I&rsquo;m really excited about the heavy emphasis I&rsquo;m seeing on <a href="http://gettingsmart.com/2013/05/teaching-kids-to-code-an-economic-social-justice-issue/">teaching kids to code</a>. Although I agree with just about everything <a href="http://codinghorror.com">Jeff Atwood</a> wrote in his controversial post, <a href="http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html">&ldquo;Please Don&rsquo;t Learn to Code&rdquo;</a>, I also believe that in an age in which <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">software is eating the world</a>, understanding code is a basic literacy issue. This goes beyond the concept of digital literacy: as applied, this boils down to knowing how to use Google. What we&rsquo;re seeing in the movement to bring coding into the core curriculum is a new emphasis on what I&rsquo;d like to call <em>computational literacy.</em></p>

<h3>Computational Literacy</h3>

<p>Computational literacy is a concept that I wish had been &ldquo;a thing&rdquo; when I was in school. I&rsquo;ll start with an anecdote, and then delve into the gritty challenges that the &ldquo;teaching kids to code&rdquo; movement is failing to recognize.</p>

<p>When I was a kid, I loved math&hellip; or, at least, I loved figuring out the algorithms behind the calculation. I learned BASIC when I was 5 or 6, so when got to middle school, and discovered that the Texas Instruments graphing calculators we were required to buy for class spoke just about the same dialect of BASIC I had learned as a kid (I first learned to code on a <a href="http://en.wikipedia.org/wiki/Texas_Instruments_TI-99/4A">TI 99/4A</a>), I was so excited. Once I could derive the algorithm from a new concept we were being taught, I could express it in code and skip the boring parts. I&rsquo;ve never done well when bored.</p>

<p>Alas, my youthful optimism was to be dashed on the rocks of pedagogical ignorance and stupidity. First, I was told that I wouldn&rsquo;t receive credit for my <strong>correct</strong> answers because I didn&rsquo;t &ldquo;show my work&rdquo;.</p>

<p>On the next exam, I wrote out the source listing of each program I had used with a reference to the problems to which it had been applied (I&rsquo;m pretty sure the number of GOTOs I used in those days would have made Dijkstra cry).</p>

<p>That&rsquo;s when they usually called my mom in for a conference.</p>

<!-- more -->


<h3>WTF Technophobes</h3>

<p>I have to give my mother credit here. We went into those meetings facing an irate math teacher discussing how I was being insolent and writing a program instead of learning the math concepts I was supposed to learn in the class. My mother&rsquo;s response was a deadpan &ldquo;If he didn&rsquo;t understand the concepts, how could he write the program?&rdquo;</p>

<p>Did I mention my mom is awesome?</p>

<p>There was never a real resolution to this. I stopped taking math when I&rsquo;d gotten enough credits to graduate (thanks, all my math teachers, for teaching me to hate a subject I once loved because it was taught by ignorant technophobes). I tried again in college, but was greeted by the same attitude, so combined with that and a required CS 101 class on Visual Basic (as if I would even run Windows, much less write VB), I majored in Philosophy. Okay, that&rsquo;s enough spleen for this post (and I have no regrets majoring in Philosophy; you&rsquo;ll learn more critical thinking skills in a good philosophy program than in any Applied Math or CS program).</p>

<h3>Teaching Kids to Code? Why?</h3>

<p>We need a paradigm shift in education before we even <em>dream</em> of making coding part of the curriculum. Until we challenge our basic attitudes and assumptions, teaching kids to code in school will be an abject failure, for a number of reasons.</p>

<p>The first is that abstract learning without application is meaningless. I&rsquo;m not the most emotive viewer, but Conrad Wolfram did a TED talk a while back that had me jumping out of my chair, clapping, and shouting &ldquo;#{expletives.sample} yeah!&rdquo; repeatedly at my computer. Here&rsquo;s the video (If you haven&rsquo;t watched &ldquo;Teaching kids real math with computers&rdquo;, do so NOW):</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/60OVlfAUPJg" frameborder="0" allowfullscreen></iframe>


<p>If our math curricula (the subject best suited to a programming solution!) are based around chidren doing rote, repetitive calculation, what&rsquo;s the point in teaching them to code? I had hoped that maybe the attitude toward programming in schools had changed in the nearly 15 years since I graduated high school, but a quick Google search showed that not much has changed, e.g. <a href="http://www.k12.wa.us/mathematics/CalculatorPolicy.aspx">Washington&rsquo;s state K-12 math calculator policy</a>.</p>

<p>No programs. No code, dogs, or Irish need apply.</p>

<p>How can we even <em>think</em> of teaching kids to code while code is a &ldquo;cheat,&rdquo; &ldquo;not showing your work&rdquo; (where&rsquo;s the harm in automating work that <em>should</em> be considered beneath human dignity?), et cetera.</p>

<p>Most of the proposals I&rsquo;ve seen around the &ldquo;teaching kids to code&rdquo; thing center on getting practicing software engineeers to volunteer their time with kids to teach them basic (and more advanced, if they&rsquo;re into it) programming skills.</p>

<p>We&rsquo;re totally into this idea! Particularly in the Ruby community, there&rsquo;s <a href="http://www.kidsruby.com/">KidsRuby</a> and <a href="http://hackety.com/">Hackety Hack!</a>, awesome projects centered around teaching kids basic programming skills in a fun and easy-to-learn dynamic language.</p>

<p>But until teachers understand the tech enough to embrace (rather than fear) it, what&rsquo;s the point?</p>

<p>If I wasn&rsquo;t already at least a hobbyist hacker, and I was taking my first programming course, and arrived in math class only to be told I couldn&rsquo;t apply my exciting and newly-learned skills to the problem at hand, because it was like cheating, how would I react? I&rsquo;d most likely lose interest in a subject I couldn&rsquo;t apply to anything.</p>

<p>Okay, well, <em>I</em> would likely lose interest in my math class (or at least my math teacher) because code is <em>so frakking cool.</em> But I&rsquo;m trying to imagine myself as the student who isn&rsquo;t a huge nerd.</p>

<h3>Quis docet ipsos doctores?</h3>

<p>It might sound like I&rsquo;ve been a bit harsh toward the teachers here. Nothing could be further from my intent. As I&rsquo;ve gained time and distance, I&rsquo;ve realized that it&rsquo;s merely ignorance that built a wall between us; not stupidity, and certainly not malice. And it was an ignorance for which they were not responsible; it was the fault of the system that trained them, and the system that was later responsible for their professional development.</p>

<p>No one ever taught my teachers about software; what went into building it, using it, etc.</p>

<p>If (most of) the teachers are computational illiterates, how can we expect the kids to become computationally literate in any meaningful way?</p>

<p>Technology has penetrated pedagogy to a significant degree but hasn&rsquo;t really changed the practice in a fundamental way; if your use of technology isn&rsquo;t transformative, it&rsquo;s a misuse, possibly an abuse.</p>

<p>Where technology hasn&rsquo;t penetrated in a meaningful way is in professional development. Teachers are still &ldquo;improving&rdquo; their skills in more or less the same way they were decades ago. This has to change. If you&rsquo;re teaching in a STEM-related area and you cannot or will not understand variable assignment, iteration, recursion, and other basic concepts &mdash; the very basics of coding &mdash; you should find a new career. I&rsquo;m not saying you need to delve into pointers, concurrency, etc. Just the basics. If I were going into high school all over again (and this is what I intend for my daughter (if she&rsquo;s into it), so Math Teachers Beware!), I would go in with a mastery of <a href="http://mitpress.mit.edu/sicp/">SICP</a>, and a willingness to get myself expelled for refusing to do rote calculation when I could solve the problem with a 3-line recursive function in Scheme.</p>

<h3>What&rsquo;s The Answer?</h3>

<p>Good question. I think the reason we don&rsquo;t have a good answer yet is that we&rsquo;ve been asking the wrong question. Getting developers to mentor students is a fantastic idea; if my time wasn&rsquo;t 120% consumed between a startup and a six month old, I&rsquo;d be spending my free time (that&rsquo;s a thing?) volunteering to teach kids to program. But we run into a roadblock when the general population of educators need a class just to use Twitter. Which is why I ask, &ldquo;Quis docet ipsos doctores?&rdquo; &mdash; &ldquo;Who teaches the teachers themselves?&rdquo;</p>

<p>This is also why I&rsquo;m so excited about working at <a href="http://anestuary.com">An Estuary</a>. The opportunity to bring technological solutions not just to education, but to professional development within education, is the opportunity to bridge the gap between what students need to learn and what teachers are capable of allowing them to learn in a meaningful way. Of bringing education into the 21st century (after dragging it kicking and screaming through the 20th, because it&rsquo;s currently stuck in the 19th, albeit with some toys from the future).</p>

<p>I never want another child to look at her teacher and think (as I did) &ldquo;are you from the past?&rdquo; I never want another nerd to hate math because his teacher didn&rsquo;t understand that <em>the code is the work.</em> I never want another hacker to give up on education because her teachers, professors, peers, etc. appeared to be stupid or malicious when they were merely ignorant.</p>

<p>I want to change the system. I want to make &ldquo;it gets better&rdquo; real for hackers and nerds.</p>

<p>I want to make the subjugation of billions of children to the subhuman task of rote calculation a thing of the past.</p>

<p>How far am I willing to go?</p>

<p>Doctores docebo, si necesse est.</p>

<p>We must teach the teachers, or teaching the children is so much tilting at windmills. There are no easy solutions, but I&rsquo;m proud to be part of a company that&rsquo;s addressing the hard problems.</p>

<h3>Postscript</h3>

<p>This post has been long in the making; shortly after I completed the first draft, <a href="https://www.edsurge.com">EdSurge</a> posted an opinion piece, <a href="https://www.edsurge.com/n/2013-05-28-opinion-learning-to-code-isn-t-enough">&ldquo;Learning To Code Isn&rsquo;t Enough&rdquo;</a>, which looked at this issue a little differently. It cited a wonderful article on <a href="http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/Wing06.pdf">&ldquo;Computational Thinking&rdquo;</a> (essentially what I describe as &ldquo;computational literacy&rdquo;) by Jeanette Wing, arguing for the equal status of CS fundamentals with reading, writing, and arithmetic in curriculum standards.</p>

<p>The article also highlights a problem with the &ldquo;teach kids to code&rdquo; movement, which I see as complementary to my own objections; while I was arguing that it&rsquo;s pointless to teach kids to code when they won&rsquo;t be <em>allowed</em> to apply that skill, the EdSurge piece points out the absurdity of teaching kids to code without giving concrete opportunities to apply the ability.</p>

<p>Essentially, it comes down to the same thing: coding is wonderful, but if it&rsquo;s not applied to a real-world problem, it&rsquo;s a waste of resources.</p>

<p>I learned BASIC so I could make my screen draw pictures. That&rsquo;s great for a five year old. But I learned C so I could make my printer work with Linux; I learned Perl so I could type fewer commands into the shell; I learned PHP and SQL to build websites, and I learned Ruby because PHP sucks. I learned Scheme because I wanted to hack my way through SICP, and I learned Clojure because I wanted to do concurrent programming without mutexes. There was always a reason, a purpose, an application.</p>

<p>If we want kids to code, we must not only allow them to apply that knowledge whenever and wherever the opportunity arises, we must also train teachers to always and everywhere encourage the application of computational thinking (as well as programming) to whatever problem set presents itself as a viable candidate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTime Conversions in Clojure]]></title>
    <link href="http://decomplecting.org/blog/2013/02/03/datetime-conversions-in-clojure/"/>
    <updated>2013-02-03T14:18:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/02/03/datetime-conversions-in-clojure</id>
    <content type="html"><![CDATA[<p>In dealing with integrating data from disparate incomaptible systems (which I do to a degree that would drive some men mad), one of the most frequent irritations is dealing with datetime conversions.</p>

<p>A while ago, I <a href="http://decomplecting.org/blog/2012/08/03/legacy-systems-on-rails-part-2/">wrote a post about Bubba</a> (not its real name), a legacy/vendor-supplied system in which the original developers (may they suffer eternal torment) decided to store all datetimes as floating-point values using a bastardized form of the Julian Day system with fractional day part. In that post, I showed a solution used in a Ruby on Rails web app, but now I&rsquo;m writing data integration services for multiple systems, and needed something a bit more robust, so I&rsquo;m writing it in Clojure.</p>

<p>I&rsquo;ll start off with the dependencies:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">ns </span><span class="nv">project.util.date</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-time.core</span> <span class="ss">:as</span> <span class="nv">tm</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">clj-time.local</span> <span class="ss">:as</span> <span class="nv">loc</span><span class="p">]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">clj-time.format</span> <span class="ss">:as</span> <span class="nv">fmt</span><span class="p">]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">clojure.math.numeric-tower</span> <span class="ss">:as</span> <span class="nv">math</span><span class="p">])</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="ss">:use</span> <span class="nv">clj-time.coerce</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">oracle.sql</span> <span class="nv">TIMESTAMP</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>       <span class="p">[</span><span class="nv">java.sql</span> <span class="nv">Timestamp</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;m using the fantastic <a href="https://github.com/seancorfield/clj-time">clj-time</a> library by Sean Corfield. It&rsquo;s basically a wrapper around the <a href="http://joda-time.sourceforge.net/">Joda Time</a> Java library, allowing us to use its powerful datetime handling in idiomatic Clojure.</p>

<p>So, for the actual code. First, the Bubba dates need to be converted to and from a floating point value to a normal Date object.</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;; Bubba DateTime conversions&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;; Set day of calendar reform for TS julian dates.</span>
</span><span class='line'><span class="c1">;; And yes, it uses local time, not UTC. Because FML.</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">docr</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;It&amp;rsquo;s the day of Calendar Reform for bubba&amp;rdquo;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">loc/to-local-date-time</span> <span class="p">(</span><span class="nf">tm/date-time</span> <span class="mi">1899</span> <span class="mi">12</span> <span class="mi">30</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">fractional-part</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Get the fractional Julian day part from a DateTime&amp;rdquo;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">dt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;hour-part</span> <span class="p">(</span><span class="nf">tm/hour</span> <span class="nv">dt</span><span class="p">)</span>
</span><span class='line'><span class="nv">min-part</span>  <span class="p">(</span><span class="nf">tm/minute</span> <span class="nv">dt</span><span class="p">)</span>
</span><span class='line'><span class="nv">sec-part</span>  <span class="p">(</span><span class="nf">tm/sec</span> <span class="nv">dt</span><span class="p">)</span>
</span><span class='line'><span class="nv">seconds</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">hour-part</span> <span class="mi">60</span> <span class="mi">60</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">min-part</span> <span class="mi">60</span><span class="p">)</span> <span class="nv">sec-part</span><span class="p">)]</span>
</span><span class='line'><span class="p">(</span><span class="nb">float </span><span class="p">(</span><span class="nb">/ </span><span class="nv">seconds</span> <span class="mi">86400</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">to-bubbadt</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Converts a DateTime to a bubba Julian date&amp;rdquo;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">dt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">offset</span> <span class="nv">docr</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">+ </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">tm/in-days</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">tm/interval</span> <span class="nv">offset</span> <span class="nv">dt</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fractional-part</span> <span class="nv">dt</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">current-bubbadt</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Get the current local time as a bubba Julian date&amp;rdquo;</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">to-bubbadt</span> <span class="p">(</span><span class="nf">loc/local-now</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">from-bubbadt</span> <span class="p">[</span><span class="nv">bubbadt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">day-part</span> <span class="p">(</span><span class="nf">math/floor</span> <span class="nv">bubbadt</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="nv">frac-part</span> <span class="p">(</span><span class="nb">- </span><span class="nv">bubbadt</span> <span class="nv">day-part</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">docr</span> <span class="nv">docr</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="nf">tm/plus</span> <span class="nv">docr</span> <span class="p">(</span><span class="nf">tm/days</span> <span class="nv">day-part</span><span class="p">)</span> <span class="p">(</span><span class="nf">tm/secs</span> <span class="p">(</span><span class="nf">math/round</span> <span class="p">(</span><span class="nb">* </span><span class="mi">86400</span> <span class="nv">frac-part</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Okay, that&rsquo;s probably a lot to take in, but basically it performs the calculations to convert the floating-point dates to Date objects and back again. But there&rsquo;s still a catch. In some of the views I&rsquo;ve built for reporting, I&rsquo;m pre-converting those dates to Oracle SQL TIMESTAMP types, and depending on the context, sometimes those floats come back as Doubles, and sometimes as BigDecimals.</p>

<p>Clojure&rsquo;s got me covered, with multimethods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;; Use a multimethod for our date coercion b/c the input type might be variable.</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">bubba-date-coerce</span> <span class="nv">class</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmethod </span><span class="nv">bubba-date-coerce</span> <span class="nv">Double</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">from-bubbadt</span> <span class="nv">f</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmethod </span><span class="nv">bubba-date-coerce</span> <span class="nv">BigDecimal</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">from-bubbadt</span> <span class="nv">f</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmethod </span><span class="nv">bubba-date-coerce</span> <span class="nv">oracle.sql.TIMESTAMP</span> <span class="p">[</span><span class="nv">ts</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">from-date</span> <span class="p">(</span><span class="nf">.toDate</span> <span class="nv">ts</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmethod </span><span class="nv">bubba-date-coerce</span> <span class="ss">:default</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">identity </span><span class="nv">d</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> Much like generics in Common Lisp (well, CLOS anyhow) <code>defmulti</code> takes a dispatch function as an argument, in this case <code>class</code>, which returns the class of the argument passed to the multimethod. Methods can then be defined to handle each type of possile argument, with a <code>:default</code> method for unmatched cases. Multimethods can be used with any dispatch function you like, but <code>class</code> is a common use case, and handy as hell here.</p>

<p> As I mentioned, the point of this is to get data in and out of multiple systems, and they all have their own idiosyncracies.</p>

<p> For instance, there&rsquo;s, uhh, let&rsquo;s call it Joe&rsquo;s Directory, or JD, which stores all of its dates and datetimes as strings, with inconsistant formatting across the board.</p>

<p> Luckily, clj-time has awesome parsers:</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span> <span class="c1">;; General (jd DateTime conversions)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">def </span><span class="nv">jd-parser</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fmt/formatter</span> <span class="p">(</span><span class="nf">tm/default-time-zone</span><span class="p">)</span> <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;MM/dd/YYYY&amp;rdquo; &amp;ldquo;YYYYMMddHHmmssZ&amp;rdquo; &amp;ldquo;YYYY-MM-dd HH:mm:ss&amp;rdquo;))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">jdparse</span> <span class="p">[</span><span class="nv">date-string</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fmt/parse</span> <span class="nv">jd-parser</span> <span class="nv">date-string</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Easy as pie. Where it gets truly beautiful, however, is when mixed in with <a href="http://sqlkorma.com/">Korma</a> for SQL abstraction. Korma entities have two special macros for data conversion: <code>prepare</code>, which applies a function to data before storing it in the database, and <code>transform</code> which applies a function when reading from the database.</p>

<p>Since Korma returns query results as a vector of hashmaps, it&rsquo;s as simple as updating a hashmap:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">jd-date-transform</span> <span class="p">[</span><span class="nv">rec</span><span class="p">]</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Converts date strings to DateTime instances&amp;rdquo;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">ent</span> <span class="nv">rec&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="nv">date-fields</span> <span class="p">[</span><span class="ss">:DOB</span> <span class="ss">:empstartdate</span> <span class="ss">:modifytimestamp</span> <span class="ss">:createtimestamp</span><span class="p">]]</span>
</span><span class='line'><span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">update-in</span> <span class="nv">%</span> <span class="p">[</span><span class="nv">%2</span><span class="p">]</span> <span class="nv">jdparse</span><span class="p">)</span> <span class="nv">ent</span> <span class="nv">date-fields</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s the first version of the transform fn I wrote for JD, but there&rsquo;s two problems. First, the fields to apply are hard-coded in the <code>let</code> form. More importantly, however, is the condition where I do a <code>select</code> and don&rsquo;t return those fields; <code>update-in</code> will add the field with a value of <code>nil</code>.</p>

<p>So we need a higher-order function, and a bit of help from <code>clojure.set</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">generic-transform</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Transform function for queries. Arguments are a function to apply (f),</span>
</span><span class='line'>   <span class="nv">the</span> <span class="nv">entity</span> <span class="nv">to</span> <span class="nv">be</span> <span class="nv">transformed</span>, <span class="nb">and </span><span class="nv">the</span> <span class="nv">fields</span> <span class="nv">on</span> <span class="nv">which</span> <span class="nv">to</span> <span class="nb">apply </span><span class="nv">the</span> <span class="nv">transformation.</span><span class="o">&amp;</span><span class="nv">rdquo</span><span class="c1">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">f</span> <span class="nv">ent</span> <span class="nv">fields</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">update-fn</span> <span class="nv">f&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="nv">ent</span> <span class="nv">ent</span>
</span><span class='line'>    <span class="nv">fields</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">st/intersection</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">keys </span><span class="nv">ent</span><span class="p">))</span> <span class="p">(</span><span class="nb">set </span><span class="nv">fields</span><span class="p">)))]</span>
</span><span class='line'><span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">update-in</span> <span class="nv">%1</span> <span class="p">[</span><span class="nv">%2</span><span class="p">]</span> <span class="nv">update-fn</span><span class="p">)</span> <span class="nv">ent</span> <span class="nv">fields</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finding the set intersection of the fields we normally want to transform, and the fields returned, ensures we don&rsquo;t get extra fields with values of <code>nil</code>.</p>

<p>And look, I resisted the temptation to use a macro where a function would suffice! Do I get points for good Lisp behavior?</p>

<p>Then it&rsquo;s as simple of using a lambda that applies this function inside our korma entity declaration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defentity</span> <span class="nv">customers</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nv">ldquo</span><span class="c1">;Korma entity for the CUSTOMER table. Transforms Bubba datetimes to DateTime objects.&amp;rdquo;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">database</span> <span class="nv">envdb</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">table</span> <span class="ss">:customer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">transform&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;#</span><span class="p">(</span><span class="nf">generic-transform</span> <span class="nv">dt/bubba-date-coerce</span> <span class="nv">%</span> <span class="p">[</span><span class="ss">:active_start_date</span>
</span><span class='line'>                                                   <span class="ss">:active_end_date</span>
</span><span class='line'>                                                   <span class="ss">:lastmod_datetime</span>
</span><span class='line'>                                                   <span class="ss">:birthdate</span>
</span><span class='line'>                                                   <span class="ss">:opendatetime</span><span class="p">])))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So that&rsquo;s how I&rsquo;m normalizing datetimes in this particular project. I&rsquo;m really enjoying writing code like this: building short, composable functions and refactoring by decomplecting them into shorter, more composable functions.</p>

<p>I find refactoring easier to reason about in Clojure than any other language I&rsquo;ve worked in. Thinking in terms of simple, composable functions (particularly having the facility of higher-order functions and macros) also makes it very straightforward to decouple interface and implementation.</p>

<p>I&rsquo;ll state for the record I&rsquo;m fairly new to Clojure, so it wouldn&rsquo;t surprise me if this code looks pretty amateurish to more experienced Clojurians. If anyone has any suggestions for improving it, I&rsquo;d welcome the advice.</p>
]]></content>
  </entry>
  
</feed>
