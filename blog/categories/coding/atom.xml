<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Practical Elegance]]></title>
  <link href="http://decomplecting.org/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://decomplecting.org/"/>
  <updated>2013-11-21T02:39:53-05:00</updated>
  <id>http://decomplecting.org/</id>
  <author>
    <name><![CDATA[Jason Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github Matters - Followup]]></title>
    <link href="http://decomplecting.org/blog/2013/11/20/github-matters-followup/"/>
    <updated>2013-11-20T23:36:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/20/github-matters-followup</id>
    <content type="html"><![CDATA[<h4>Mea Culpa</h4>

<p>I made some mistakes in my last post. First off, I&rsquo;d like to apologize to <a href="http://ashedryden.com/">Ashe Dryden</a> for referring to her as Ms. Dryden while I referred to <a href="http://jcoglan.com/">James Coglan</a> by his full name. I had no intention of explicitly implying Ashe&rsquo;s gender; my usual writing style is to refer to people by their full name initially and to use an approrpiate title thereafter. But upon review I realized I referred to Ashe as &ldquo;Ms. Dryden&rdquo; in subsequent references, while I referred to James Coglan as &ldquo;James Coglan&rdquo; both times I mentioned him.</p>

<p>I&rsquo;m sorry about that. It was an oversight, and if I had been paying better attention, the second reference to Mr.s Coglan would have been &ldquo;Mr. Coglan&rdquo; for parity. But as I failed to achieve parity, and Ashe expressed that she preferred &ldquo;Ashe Dryden&rdquo; to &ldquo;Ms. Dryden&rdquo; in general, I decided to <code>s/Ms./Ashe/g</code> the post. It is now corrected.</p>

<!-- more -->


<h4>I missed some things</h4>

<p>My post was mostly in response to the <a href="https://blog.jcoglan.com/2013/11/15/why-github-is-not-your-cv/">Github Is Not Your CV</a> sentiment, as well as the <a href="https://news.ycombinator.com/item?id=6728417">Hacker News comments</a> related to Ashe&rsquo;s post, rather than the diversity/privilege statistics offered by Ashe&rsquo;s <a href="http://ashedryden.com/blog/the-ethics-of-unpaid-labor-and-the-oss-community">original article</a>. I had no intention of discounting the privilege issues involved in having the time and resources to contribute to OSS or produce original experiments/libraries/applications on <a href="https://github.com">Github</a>.</p>

<p>I didn&rsquo;t disagree with any of that. I still think it&rsquo;s a good idea to make projects public and make that part of your portfolio. I never suggested that hiring managers should use Github as the only criterion&hellip; but I do think it demonstrates a commitment to professional development, to honing your craft.</p>

<p>I&rsquo;m curious if the cited statistics on OSS contributions refer to &ldquo;have commits to major OSS projects&rdquo; or &ldquo;have code samples online.&rdquo;</p>

<p>My reference was to the latter. Not that I wouldn&rsquo;t love to hire people with commits to Rails or core.async; but for the most part, I want to see what you build in your spare time. Your production code is probably proprietary and covered by an NDA. So I want to see what I <em>can</em> see.</p>

<p>If you don&rsquo;t have a Github profile, that&rsquo;s okay. We can still talk. Either way, I&rsquo;m probably going to want to pair with you or give you a take-home assignment before the next interview round. Those are great ideas that both Ashe and James proposed as alteratives to Github reviews.</p>

<p>I see them more as complements than alternatives, but ideally seeing both would be wonderful.</p>

<p>I still love Github as part of the screening process. Especially if your Github is messy. I can see the crappy Rails CMS you wrote two years ago as practice, and the Clojure OAuth library you comitted to last week, and see the growth you&rsquo;ve made in that time. That&rsquo;s the value of Github to me.</p>

<p>I want to see professional development, not unpaid labor. I want to know you <em>don&rsquo;t consider hacking labor, but play.</em> Not because I want you to work 80 hours a week; I don&rsquo;t, because that&rsquo;s the road to burnout. But I want to know you love this shit and, in a socialist utopia, would do it for free.</p>

<h4>Damn reality</h4>

<p>Yeah, I know hacking on OSS is a privilege we don&rsquo;t all enjoy. Neither is going to college or learning to code. These are all things we need to improve access to as a community, but the nice thing about Github, pairing, and code challenges, is that they can balance out hte privilege issues of college and other factors. For me, as a hiring hacker, I care more about work than degrees. Github is one way to show that, but pairing etc. are equally valid.</p>

<h4>Conclusion</h4>

<p>OSS hacking is a privilege: I&rsquo;ve done a fuckton less since I had a kid; mostly work-related stuff. But it still matters, and it&rsquo;s accessible to anyone with a computer and an internet connection. That in and of itself is discriminatory, but I can&rsquo;t see how you&rsquo;re going to be a hacker to begin with sans those things.</p>

<p>I think my main objection is the Harrison Bergeron argument: we&rsquo;re using statistics about privilege to say &ldquo;let&rsquo;s not use this (IMHO) valid metric because the privileged have access to this resource&rdquo; instead of &ldquo;how can we change society to improve access to this resource.&rdquo;</p>

<p>Yeah, the second proposition is harder. And you can discount the utility of the metric like James Coglan, or reject the premise like Ashe Dryden, but in either case there is a realpolitik question:</p>

<ol>
<li>Hiring managers see value in this metric.</li>
<li>Some of them probably have valid reasons for this.</li>
<li>Access is influenced by social privilege.</li>
<li>We can either (a) throw the baby out with the bathwater, or (b) try to address the underlying issue.</li>
</ol>


<p>The typical response is 4(a), for whatever reason. I&rsquo;d like to see 4(b), but I don&rsquo;t know how to make it happen. I&rsquo;d rather see theories on how this can be achieved than see strategies and arguments for 4(a).</p>

<p>Anyhow, like I said&hellip; the statistics are damning, but I&rsquo;d rather see the statistics change. How do we get more women into open source? I think OSS contributions have value as one factor among many, but I also think it&rsquo;s a value for <em>the individual developer,</em> not just as a hiring criterion. The low contribution ratio of women and minorities to OSS is the problem, not the fact that it&rsquo;s a metric used for candidate evaluation. But that&rsquo;s a whole different issue, and I don&rsquo;t have an answer for fixing that&hellip; yet.</p>

<p><strong>tl;dr apologies to Ashe; inequality and privilege are real; fix society, don&rsquo;t discount the value of OSS/Github contributions</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Github Is Not Your CV.  It Still Matters]]></title>
    <link href="http://decomplecting.org/blog/2013/11/19/so-github-is-not-your-cv-it-still-matters/"/>
    <updated>2013-11-19T21:22:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/19/so-github-is-not-your-cv-it-still-matters</id>
    <content type="html"><![CDATA[<p>It&rsquo;s funny, a few days before the OSS-as-hiring-criteria debate emerged on Twitter and HN — mostly stemming from <a href="http://david.heinemeierhansson.com/2013/the-perils-of-mixing-open-source-and-money.html">this post</a> by <a href="https://twitter.com/dhh">DHH</a> and <a href="http://ashedryden.com/blog/the-ethics-of-unpaid-labor-and-the-oss-community">this post</a> by <a href="https://twitter.com/ashedryden">Ashe Dryden</a> — I had just posted <a href="/blog/2013/11/13/just-get-hacking-part-2/">Just Get Hacking (Part 2)</a>, encouraging prospective developers lacking a CS background who wanted to get hired to <strong>put lots of code on Github.</strong></p>

<p>There are good counterarguments to this. Github is not a portfolio, it&rsquo;s where your public code lives. <a href="https://github.com/canweriotnow">My Github</a> has a bunch of projects I should maybe delete; stalled or abandoned projects, one-off projects with poor test coverage, etc. It&rsquo;s not really a representative sample of my <em>production</em> code. But that&rsquo;s not why I think it matters.</p>

<p>In her post, Ashe provides several excellent alternatives to OSS contributions as evaluation criteria; these include:</p>

<ul>
<li>Pair with the prospective hire</li>
<li>Contract the prospective hire for a week or two</li>
<li>Ask for samples</li>
</ul>


<p>When considering potential hires, Github is not everything. At <a href="http://anestuary.com">An Estuary</a>, we definitely request (and prefer) a Github profile with applicant CVs; but it&rsquo;s not about contributions to OSS projects (i.e., the &ldquo;unpaid labor&rdquo; critiqued in Ashe Dryden&rsquo;s post).</p>

<p>The focus of our company is on professional development. We not only dogfood technically (i.e., using our own software), but also culturally. We want to hire people who are focused on their own professional development, and Github is a good place to document that.</p>

<p>(Also&hellip; code samples? If you wrote something worth showing me, why isn&rsquo;t it on Github, in a gist, on JSFiddle, etc.?)</p>

<p>Our main product is designed to help educators document their professional development. Hackers like us have Github, so if we&rsquo;re not using it&hellip; something might be amiss.</p>

<p>So when I&rsquo;m looking at a Github profile evaluating a potential hire, I&rsquo;m not looking for accepted pull requests to <a href="https://github.com/rails/rails">Rails</a>. I mean, that would be a plus, but&hellip;</p>

<!--more-->


<h3>A Commitment to Professional Development</h3>

<p>That&rsquo;s what I want to see. Not a portfolio, as <a href="http://blog.jcoglan.com/2013/11/15/why-github-is-not-your-cv/">James Coglan suggests</a>. He&rsquo;s not wrong, but as a hiring hacker, at least from my perspective, he misjudges the value of Github profiles.</p>

<p>For me, evaluating Github profiles for potential hires is about a commitment to a <em>profession.</em> And that&rsquo;s not something that&rsquo;s real in software at the moment, but it&rsquo;s something we need to develop.</p>

<p>If building software is <em>just a paycheck,</em> I don&rsquo;t really want to work with you. No offense, I&rsquo;m sure there are plenty of organizations out there that are fine with that. You should work for them. I have, and I hated it, but find your own bliss. I don&rsquo;t want you to miss out on family and kids and friends; I don&rsquo;t want to miss out on those either. But in those couple of hours between the kids going to bed and sleep closing in&hellip; well, I&rsquo;m hacking away on some odd side project, and that&rsquo;s who I want by my side while we&rsquo;re trying to hack things better.</p>

<p>There&rsquo;s a conflation of OSS contributions (i.e., unpaid labor contributing to free software your company or prospective company uses to make a profit) and having a Github (or Bitbucket or whatever) account that demonstrates a commitment to honing your craft over time. Both are admirable, but I want to hire smart people who are committed to always be learning. Github is a good way to demonstrate that quality, even if yours (like mine) is full of projects that went nowhere.</p>

<p>Sorry, I need evidence of commitment. If you have patches in or Rails or clojure.core that&rsquo;s bonus points. But your commitment is what matters to me:</p>

<blockquote class="twitter-tweet" lang="en"><p>Timeframes in which you cannot become a good programmer: 2 weeks; 2 months; 2 years. Sorry. 10,000 hours. Not my fault. Sorry.</p>&mdash; Gary Bernhardt (@garybernhardt) <a href="https://twitter.com/garybernhardt/statuses/397833212019232769">November 5, 2013</a></blockquote>


<script async src="http://decomplecting.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>10,000 hours. That&rsquo;s what it takes. Not that you&rsquo;ve put that time in already, but I need to believe you&rsquo;re committed to putting the time in. Sorry if that&rsquo;s a hardship. There are other jobs.</p>

<p>Now I&rsquo;m close to sounding like a jerk, but it&rsquo;s just the reality. If I was a flight instructor who certified a pilot who hadn&rsquo;t put in their hours, I&rsquo;d be criminally negligent. Software matters too. Just look at <a href="http://healthcare.gov">healthcare.gov</a></p>

<h3>Privilege isn&rsquo;t just about OSS</h3>

<p>One of the main points of Ashe Dryden&rsquo;s article is that OSS is dispropotionally authored by privileged groups, i.e. young white males. While this is clearly backed by the data, the reasons for this are not limited to the software industry; most professions (and yes, I am considering software engineering a profession) have similarly disproportionate distributions. <a href="http://www.nalp.org/minoritieswomen">Lawyers</a> and <a href="http://nces.ed.gov/fastfacts/display.asp?id=72">doctorates in general</a> skew in the same direction. Why? For the same reasons addressed in the argument against OSS as hiring criteria: young white males disproportionately have the free time and resources available to pursue advanced degrees, attend professional school, etc.</p>

<p>Now, in software, we have an edge case in which a degree isn&rsquo;t necessarily required in the first place. But something has to stand in for that, doesn&rsquo;t it? Some demonstration of competency?</p>

<p>I think this was one of the more salient points made in <a href="https://news.ycombinator.com/item?id=6728417">the Hacker News thread</a> on Ashe Dryden&rsquo;s post — all hiring criteria are discriminatory in one way or another, e.g. requiring a Master&rsquo;s degree discriminates against people with only a Bachelor&rsquo;s — and surprise, surprise, individuals privileged by race or gender are more likely to secure the higher degree.</p>

<p>So I think the &ldquo;Github hiring criterion&rdquo; is a bit of a red herring. Privilege is an issue across the board, and it really has nothing to do with OSS or Github profiles. I&rsquo;m in my first hiring role as a developer, but I find reviewing applicants' Github profiles incredibly useful; not as in &ldquo;we will talk to this person but not this other one,&rdquo; but guiding what questions to ask and what paths to explore in the interview.</p>

<p>tl;dr Hiring people is hard. Github provides <em>limited</em> data to drive those decisions. It&rsquo;s easier to make confident decisions with more data.</p>

<h5><em>Postscript</em></h5>

<p>If Github is privilegey, than what is <a href="http://careers.stackoverflow.com/">Careers 2.0</a>? You either need an awesome Github rep or <a href="http://stackoverflow.com">StackOverflow</a> karma <em>just to get a profile.</em> And answering James Coglan&rsquo;s critique — Careers 2.0 actually <em>is</em> a portfolio; you feature your best Github repos, best blog posts, etc.</p>

<p>Maybe another time I&rsquo;ll go into <a href="http://coderwall.com">Coderwall</a> or <a href="http://coderbits.com">Coderbits</a> as alternatives.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking (Part 2)]]></title>
    <link href="http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2/"/>
    <updated>2013-11-13T00:09:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2</id>
    <content type="html"><![CDATA[<h3>The Important Stuff</h3>

<p>So <a href="/blog/2013/11/12/just-get-hacking/">last post</a>, I pretty much said &ldquo;just do it,&rdquo; and explained that the companies you <em>want</em> to hire you will care less about your background than your demonstrable coding skills.</p>

<p>In this post, I want to look a little more closely at the skills that matter, and the specific areas that the &ldquo;best&rdquo; (IMHO) companies will focus on. I may be biased, but this is the stuff I care about when I&rsquo;m interviewing developers (beyond basic coding chops), and I think I&rsquo;m pretty smart.</p>

<h3>Testing, Testing, Testing</h3>

<p>So you&rsquo;re writing code that runs, runs correctly, and runs consistently. That&rsquo;s awesome. But when it comes to writing production code for a real company, you need to <em>know</em> it&rsquo;s correct, in advance. Especially with dynamic languages, when there&rsquo;s no compiler to refuse to build faulty code, testing is paramount.</p>

<p>So when you&rsquo;re working on these little personal projects, and throwing them on <a href="https://github.com">Github</a>, do a few things:</p>

<!-- more -->


<ul>
<li>Write tests. If you&rsquo;re using Ruby, I recommend <a href="http://rspec.info/">RSpec</a>.</li>
<li>Use <a href="https://travis-ci.org/">Travis CI</a>. You&rsquo;ll learn about <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>, and it&rsquo;s free for open source.</li>
<li>Use <a href="https://codeclimate.com/">Code Climate</a>. It&rsquo;s like automated code review, and also free.</li>
<li>Try <a href="https://coveralls.io/">Coveralls</a>. It&rsquo;ll help you make sure you actually are testing everything.</li>
</ul>


<p>Plus Travis, Code Climate, and Coveralls will give you little badges for your README.md on Github so you can see how your project is doing at any time.</p>

<p>Read up on practices for <a href="http://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</a>, because it matters to the people you really want to work for, and as an aspiring software craftsman, it needs to matter to you.</p>

<h3>Collaboration</h3>

<p>I mentioned the importance of coding with others last post, but I can&rsquo;t emphasize it enough. Look for opportunities for pair programming, even if it&rsquo;s remote. There are cool apps you can use for that now, like <a href="https://koding.com/">Koding</a> (and others), but in a pinch there&rsquo;s always <a href="http://www.vim.org/">vim</a> and <a href="http://tmux.sourceforge.net/">tmux</a>&hellip; which are tools you&rsquo;ll want to know anyhow.</p>

<p>And which brings me to my next point&hellip;</p>

<h3>Unix or GTFO</h3>

<p>Yeah, code is more portable than it has ever been. You can develop Ruby or Clojure or Node.js on Linux, Solaris, OS X, Windows, probably even Haiku&hellip; but you need to understand your deployment environment, which is going to be some kind of *nix unless you&rsquo;re doing .NET (which you&rsquo;re clearly not, if you came to me for advice).</p>

<p>In addition, the closer your dev environment is to your production environment, the less risk there is of weird heisenbug inconsistencies.</p>

<p>So learn <em>some</em> kind of *nix, whether it&rsquo;s OS X, Linux, or Solaris, or whatever. And dig down; use the command line. Learn your tools, learn the <code>git</code> command line, don&rsquo;t just rely on the Github GUI apps etc. Learn <code>bash</code> or <code>zsh</code>. Learn how a combination of <code>find</code>, <code>grep</code>, and <code>xargs</code> can save your ass. It&rsquo;ll make your life easier as a developer, and it&rsquo;s vital when it comes to&hellip;</p>

<h3>DevOps</h3>

<p>Long ago, in a galaxy far, far, away, developers simply wrote application code and the systems that hosted and served that code were managed by a cabal of wizened neckbeards of the Sysadmin clan. Now, in our more enlightened (or is it benighted?) age, development and operations have blurred their lines and DevOps was born.</p>

<p>In many cases, this is just an excuse for developers to be burdened with sysadmin duties; sometimes, it&rsquo;s perfectly sensible as many of the best deployment options are SaaS (Something-as-a-Service) thingamabobs. But it&rsquo;s important to get at least the basics.</p>

<p>So when you&rsquo;re looking for someplace to put your pet project web apps, put them on <a href="http://heroku.com">Heroku</a>. It&rsquo;s free for a single web dyno and no workers, and many of the &ldquo;add-ons&rdquo; (like Postgres, Redis, ElasticSearch, etc.) that are technologies you might want to play with have free tiers as well.</p>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> is Level 80 territory as far as I&rsquo;m concerned, but if you get into the DevOps thing, and want to experiment with tools like <a href="http://www.opscode.com/chef/">Chef</a>, they&rsquo;ll also give you some free time with EC2 instances to play around.</p>

<h3>Summary</h3>

<p>It all comes down to &ldquo;Just Get Hacking&rdquo;. But there are some specifics prereqs for modern software engineering, and if you can make yourself pick those up along the way, all the better. Keep it fun, and keep learning. That&rsquo;s what matters most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking]]></title>
    <link href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/"/>
    <updated>2013-11-12T00:27:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/12/just-get-hacking</id>
    <content type="html"><![CDATA[<p><em>This post is a follow up to a previous entry, <a href="/blog/2013/09/29/letter-to-a-young-or-new-programmer/">&ldquo;Letter to a Young (Or New) Programmer&rdquo;</a>.</em></p>

<p>So you&rsquo;ve been working through some of those excellent online resources, like <a href="http://learncodethehardway.org/">Learn Code The Hard Way</a>, or <a href="http://codeschool.com">Code School</a>, or whatever. You think you can build something now, and you want to get out there in the world and hack things better, but there&rsquo;s this one little problem&hellip; you have a degree in Philosophy or Psychology or no degree at all, and no résumé-worthy coding experience.</p>

<h4>Not. A. Problem.</h4>

<p>Well, not necessarily a problem. There&rsquo;s an easy solution. Just. Get. Hacking.</p>

<p>So you don&rsquo;t know about XP, Agile, Scrum, Kanban, Waterfall&hellip; there&rsquo;s always <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>.</p>

<p>So you haven&rsquo;t built an Enterprise Expert System with the AbstractVisitorFactoryAntiPatternCringeGenerator pattern&hellip; I told you to make an account on <a href="https://github.com">Github</a>, didn&rsquo;t I? And I know you take my advice because you&rsquo;re building actual goddamn software.</p>

<p>Put your stuff on Github. Ask for help on IRC.</p>

<p>Find projects that interest you, fork &lsquo;em, submit pull requests. Lots of projects even have issues labeled as &ldquo;suitable for n00bs&rdquo;.</p>

<!-- more -->


<h4>The Enterprise Dilemma</h4>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Any shop worth working at cares so much more about your coding chops, your potential, your intelligence than bullshit like résumés and academic credentials that if you can demonstrate your ability and still don&rsquo;t get the job, it&rsquo;s a blessing.</p>

<p>On the other hand, you <em>do</em> need a first coding job. And if you&rsquo;re not getting it based on your Github activity, you&rsquo;re probably getting it based on nepotism.</p>

<p>How does this happen? Still goes back to Github, IRC, meetups, etc. So go to some meetups. Talk to people, go to the pub nights, go to the open hack nights. Hack on open source projects, submit pull requests, get in on some projects that will get you recognized. Eventually, you&rsquo;ll have hacker friends who will hire you or recommend you to take over their shitty Enterprise jobs that you can use to build your résumé should you go down that route. It&rsquo;s not that hard. Hang out with nerds, learn the craft, make connections. Programming is one of the few fields where it really is <em>what you know,</em> but who you know can help too. But those connections are best made by being a badass hacker.</p>

<h4>Open Source is the Key</h4>

<p>At the end of the day, though, even if you do all sorts of networking at confs and meetups and the like, you need a strong presence in the Open Source community. I can&rsquo;t emphasize this enough: <strong>PUT YOUR CODE ON GITHUB.</strong></p>

<p>Or Bitbucket or whatever if you prefer, but open source that shit, get other people involved, and get involved in other people&rsquo;s projects.</p>

<p>I&rsquo;m in the position of having to evaluate and hire developers at <a href="http://anestuary.com">An Estuary</a>, and since I want to run the dev shop I wish existed, I&rsquo;m trying to hire that way. When we list positions, we require a Github URL because I want to see what you do, not what your former employers think of you. I assume they&rsquo;re &ldquo;former&rdquo; (or soon-to-be &ldquo;former&rdquo;) for good reason. When we interview you, I want to talk about your code, not your former supervisor&rsquo;s probable inferiority complex.</p>

<p>In summary, just get hacking. Just keep hacking. Build cool shit. Show it to the world. Talk to other nerds. Maybe try some remote pairing (Tweeting with the hashtag #pairwithme is often productive). But just make stuff. Then show me what you can do when you want a job. If you start off with a great company, that should be all you need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Letter to a Young (Or New) Programmer]]></title>
    <link href="http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer/"/>
    <updated>2013-09-29T00:15:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer</id>
    <content type="html"><![CDATA[<p>I get it. You went to college, graduated, got a job, and it&rsquo;s not what you wanted, hoped for, or whatever. Or maybe you&rsquo;ve been in the same job for years, and it&rsquo;s just no fun anymore. And you look at your friends who are hackers. Yeah, we&rsquo;re anti-social, maybe kinda jerks, but we have <em>so much fun</em> at work, and get pretty well compensated for <em>playing.</em></p>

<p>And maybe you think, &ldquo;I&rsquo;ll go back to school and get a second B.S. in Computer Science!&rdquo;</p>

<p>Chill out.</p>

<p>Maybe you&rsquo;re just guessing this whole software thing is for you and you can&rsquo;t wait to get started!</p>

<p>Chill out.</p>

<p>I&rsquo;m going to encourage you, don&rsquo;t get me wrong. But I&rsquo;m also going to encourage you to be realistic. Because I want you to be successful, not just to sprint down a blind alley. We&rsquo;ll get through this, together.</p>

<h3>Lower your expectations</h3>

<p>Look, it&rsquo;s not all rainbows, lollipops and gumdrops. It&rsquo;s not. For me, coding is a pleasure and a privilege, but it&rsquo;s not for everyone. There are <em>extremely shitty jobs</em> out there, doing what I do, and just because I&rsquo;m on cloud nine, doesn&rsquo;t mean you will be.</p>

<p>Furthermore, even though it&rsquo;s a demand-side market (there are far more job openings than talented developers), the really great jobs are still competitive as hell.</p>

<h3>Still here?</h3>

<p>I haven&rsquo;t dissuaded you? Good. Good, young padawan.</p>

<!-- more -->


<p>Since (for the couple of people toward whom this post is targeted directly) I haven taken it upon myself to train you as your Jedi master, I&rsquo;m going to point you toward <a href="http://ruby-lang.org" title="Ruby">Ruby</a> as your first language. It&rsquo;s not a perfect language, but it is beautiful, and presents a useful paradigm (object-oriented programming) in the purest form possible. So let&rsquo;s start with some Ruby resources.</p>

<p>Here&rsquo;s your pre-frosh curriculum:</p>

<ul>
<li><a href="http://tryruby.org" title="Try Ruby">Try Ruby</a> &ndash; Learn the basics, in your browser!</li>
<li><a href="http://ruby.learncodethehardway.org/" title="Learn Ruby The Hard Way">Learn Ruby The Hard Way</a> &ndash; Zed Shaw is (maybe) a jerk, but his books are good. This is a good (free) place to start.</li>
<li><a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> &ndash; Once you&rsquo;ve got a little under your belt, <a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> is your next step to make sure you&rsquo;ve got the basics under your belt.</li>
</ul>


<h3>Really? <em>Still</em> Interested?</h3>

<p>That&rsquo;s fuckin' awesome. I&rsquo;m really happy you&rsquo;re still into this.</p>

<p>Now I get to knock you on your ass, grasshopper. Hopefully you&rsquo;ve read my blog (or know me) enough to know how I feel about learning to build &ldquo;apps&rdquo; without a firm grounding in the fundamentals of computer science. So we&rsquo;re going address this right the hell now.</p>

<p>See, you didn&rsquo;t major in Computer Science. That&rsquo;s okay, niether did I. But that doesn&rsquo;t mean you get a pass on it. We&rsquo;re going to look at some resources to get you the grounding you need to really get up to snuff on the shit you&rsquo;d better know if you want to be a Real Programmer™.</p>

<p>Let&rsquo;s get started.</p>

<p>The first thing you need is math. I&rsquo;m not talking your standard college Calculus or Algebra stuff, but the Real Math you need as a real programmer. So here&rsquo;s the deal: read <a href="http://en.wikipedia.org/wiki/Concrete_Mathematics" title="Concrete Mathematics">Concrete Mathematics</a>.</p>

<p><img class="[float-right] <a" src="href="http://ecx.images-amazon.com/images/I/518GBVWEBYL.jpg">http://ecx.images-amazon.com/images/I/518GBVWEBYL.jpg</a>" title="Concrete Mathematics" ></p>

<p>This book, let me tell you, it was co-written by <a href="http://en.wikipedia.org/wiki/Donald_Knuth" title="Donald Knuth">Knuth</a>, because, let me tell you, Knuth weighed all the extant math texts in the balance and found them lacking. And if Knuth finds you lacking&hellip; jsut go home. This book tricks you into learning both algorithmic estimation and recursion in chapter one and never looks back. It is indispensible.</p>

<p>Next, you need to grok a few things: computability theory, Turing machines, syntax and semantics, etc. Once upon a time, I would have shoved a copy of <a href="http://mitpress.mit.edu/sicp/" title="SICP">The Structure and Interpretation of Computer Programs</a> in your face so fast, it would have made your head spin.</p>

<p><img class="[float-right] <a" src="href="http://upload.wikimedia.org/wikipedia/en/9/9d/SICP_cover.jpg">http://upload.wikimedia.org/wikipedia/en/9/9d/SICP_cover.jpg</a>" title="SICP" ></p>

<p>But, young padawan, I&rsquo;ve decided to ease you into your Jedi training, and we&rsquo;ve settled on Ruby as your focus of practice before you graduate to the full Lisp light saber, so let&rsquo;s consider an alternative.</p>

<p><a href="http://oreilly.com/" title="O'Reilly">O'reilly</a> recently published an excellent intro to CS book called <a href="http://shop.oreilly.com/product/0636920025481.do" title="Understanding Computation">Understanding Computation</a>, which covers about half the material in SICP, but in Ruby, and probably more acessibly than SICP (aka The Wizard Book), especially since you (by now) have a passing familiarity with Ruby.</p>

<p>So let&rsquo;s see&hellip; we&rsquo;ve got you started on Ruby, given you some good resources on the basics of CS, and you&rsquo;re on your way&hellip; what next?</p>

<h3>Resources</h3>

<p>Now we get into the areas where you&rsquo;re exploring on your own, and just coming back to me for help and guidance. Congratualtions! You&rsquo;re nearly ready to graduate to a full Jedi.</p>

<p>Let&rsquo;s see what&rsquo;s available.</p>

<ul>
<li><a href="http://codeschool.com/" title="Code School">Code School</a> is really great, and completely worth the US$25 a month they charge for their entire course catalog.</li>
<li><a href="http://coursera.com/" title="Coursera">Coursera</a> has great CS classes, not typically Ruby based, but you&rsquo;ll learn some core concepts that will be extensively useful.</li>
<li><a href="http://codecademy.com/" title="Codecademy">Codecademy</a> has free courses, of varying quality.</li>
<li><a href="http://betamore.com/academy/" title="Betamore Academy">Betamore Academy</a> has 10-week courses here in Baltimore that will bootstrap you pretty well as a developer, as well as providing networking opportunities to find internships and jobs.</li>
</ul>


<p>I&rsquo;ll try to update this in the future. And you know you can always get in touch and I&rsquo;m more than happy to give you a hand. There&rsquo;s nothing more exciting to me than smart folks falling in love with coding. Happy trails, bro, and remember to keep it fun.</p>

<p><em>Update: I&rsquo;ve posted a follow-up at <a href="/blog/2013/11/12/just-get-hacking/">&ldquo;Just Get Hacking&rdquo;</a></em></p>
]]></content>
  </entry>
  
</feed>
