<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Practical Elegance]]></title>
  <link href="http://decomplecting.org/atom.xml" rel="self"/>
  <link href="http://decomplecting.org/"/>
  <updated>2014-01-28T00:23:23-05:00</updated>
  <id>http://decomplecting.org/</id>
  <author>
    <name><![CDATA[Jason Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Discussing Privilege: EduCon Reflections #1]]></title>
    <link href="http://decomplecting.org/blog/2014/01/27/discussing-privilege-educon-reflections-number-1/"/>
    <updated>2014-01-27T20:52:36-05:00</updated>
    <id>http://decomplecting.org/blog/2014/01/27/discussing-privilege-educon-reflections-number-1</id>
    <content type="html"><![CDATA[<p>While I&rsquo;m planning a full &ldquo;overview&rdquo; reflection on <a href="http://educonphilly.org">EduCon 2.6</a>, I was (pardon the pun) privileged to participate in a conversation entitled <a href="http://educonphilly.org/conversations/The_Privileged_Voices_in_Education">&ldquo;The Privileged Voices in Education&rdquo;</a>, facilitated by <a href="https://twitter.com/audreywatters">Audrey Watters</a> and <a href="https://twitter.com/TheJLV">Jose Vilson</a>. Audrey has written about the session on <a href="http://www.hackeducation.com/2014/01/26/the-privileged-voices-in-education-educon/?utm_content=buffer01abf&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">her blog</a>, and Jose has written about it on <a href="http://thejosevilson.com/educon-addressing-privilege-developing-learners-race/">his blog</a>, so you can refer to those for context. But I want to talk about my takeaways from that wonderful session and what came after while it&rsquo;s fresh in my mind, and then work on a more general EduCon post.</p>

<h3>Privilege</h3>

<p>This is a Hard Topic to address in a meaningful way that actually effects change. It&rsquo;s a hard topic to broach in general. I applaud Audrey and Jose for creating this EduCon session, for their facilitation of the conversation, and I&rsquo;m in awe of how civil, insightful, and enlightening the discourse was.</p>

<p>Let me start by confessing: as often happens, I was unable to make it through the discussion without saying something (at the very least) bothersome. I talked about my initial reaction to <a href="https://twitter.com/search?q=%23edchat&amp;src=typd">#edchat</a>, a hashtag-based recurring event for educators on Twitter, as an offhand preface to the difficulty of certain discussions in diverse media. <a href="https://twitter.com/tomwhitby">Tom Whitby</a>, founder of #edchat, was in the room. This actually opened a (in my opinion) constructive dialogue <em>ex post facto,</em> but I&rsquo;ll return to this later.</p>

<!--more-->


<h3>The Session</h3>

<p><span class='pullquote-right' data-pullquote='there is a certain privilege inherent in knowing the terminology used to discuss privilege.'>
This was the dialogue I want to have about privilege. We discussed and defined privilege, race/class/gender/etc., micro-aggressions, and all of the many terminologies applied in analyzing privilege. Coming from an extreme left-wing political background, it was the first time it occurred to me that there is a certain privilege inherent in knowing the terminology used to discuss privilege. So the discussion on definitions, and the subjectivity inherent in the very nature of, i.e., the experience of micro-aggression, was a valuable conversation.
</span></p>

<p>Audrey and Jose did an admirable job facilitating the conversation, and although my purpose in attending EduCon was to learn more about current progressive practices in pedagogy, educational technology, and professional development (it was a work trip, after all), this was the most meaningful session to me in terms of my own experiences trying to address these difficult topics in my own day-to-day conversations, and my desire to elevate the level of discourse above snarky tweets and <a href="http://news.ycombinator.com">Hacker News</a> comments.</p>

<p><em>Note: I&rsquo;ll update this post when the video becomes available&hellip; it&rsquo;s worth a watch.</em></p>

<p>I think everyone in that session came away with a better understanding of the effects of privilege on their daily lives and professional practice — educators and technologists alike.</p>

<h3>Mon Faux Pas</h3>

<p>I mentioned that I made a comment about #edchat that caused a bit of a stir after the fact&hellip; I&rsquo;ll talk about that now. I was marveling at how <em>well</em> the session was addressing these issues, and wanted to talk about how hard it is to dive into sensitive, emotionally charged topics such as this in a medium like, for instance, Twitter. I mentioned my initial reaction to #edchat, i.e., &ldquo;this is completely the wrong tool for this use case.&rdquo; It was an aside I used to preface my comments on how much more productive I thought the conversation we were having (and the way we were conducting it) was vs. the usual privilege discussions on Twitter (and even blog posts, or HN posts) typically go.</p>

<p>I unwittingly made a comment, that without context, was interpretable as a criticism or dismissal of #edchat <em>itself,</em> and that was certainly not my intention. Tom wrote a <a href="http://tomwhitby.wordpress.com/2014/01/27/sometimes-a-chat-is-just-a-chat">blog post</a> addressing my comment (and defending #edchat) <a href="http://tomwhitby.wordpress.com/2014/01/27/sometimes-a-chat-is-just-a-chat">here</a>, which you should read. My apology (both in the modern sense, and in the sense of ἀπολογία), is <a href="http://tomwhitby.wordpress.com/2014/01/27/sometimes-a-chat-is-just-a-chat/#comment-7992">in the comments</a>. Both worth reading, for context.</p>

<p>My increasing disdain for Twitter for any kind of serious discussion is really about context. Twitter is, by design, a global cocktail party. You hear a comment that intrigues, enrages, or otherwise engages you, and you hop to another conversation, and then to another. That&rsquo;s the intent. I won&rsquo;t go to the detail I did in my comment, but I&rsquo;m glad educators find #edchat useful. That&rsquo;s fantastic. I still believe there are better tools for the use case, but knowing about other, perhaps less accessible, tools, is part of my privilege derived from living in software. So I&rsquo;m not criticizing there.</p>

<p>I do believe that topics like privilege cut to the core of our existence as being-with-others (forgive my Heideggerian moment) to a degree that the stripping away of context that Twitter facilitates makes addressing Hard Topics that much harder.</p>

<h3>Mea Culpa (Secunda Parte)</h3>

<p>I&rsquo;m no angel when it comes to having constructive dialogue in (I hate myself for using this word) &ldquo;cyberspace.&rdquo;</p>

<p>I&rsquo;m fairly antisocial by nature, and I tend to deflect with (often inappropriate) humor. For people who know me well, it tends to be endearing. For completely anonymous environments (IRC, 4chan, etc.), it&rsquo;s dismissable. Twitter (among other social platforms) is weird in that you&rsquo;re interacting on a personal level with strangers or semi-strangers.</p>

<p>I don&rsquo;t play well with others, at least until I know them well. Even then, my default response is the humor-deflection coping mechanism. I&rsquo;ve definitely fucked up in the past in these Twitter discussions, from referencing <a href="http://rulesoftheinternet.com/index.php?title=Main_Page">The Rules Of The Internet</a> to addressing Daniel Tosh&rsquo;s terrible riposte to an audience member&rsquo;s response to his joke about <a href="http://www.thedailybeast.com/articles/2012/07/11/why-daniel-tosh-s-rape-joke-at-the-laugh-factory-wasn-t-funny.html">rape jokes</a> within the frame of reference of &ldquo;comedy club culture&rdquo; and &ldquo;heckling&rdquo; instead of prioritizing the impact on the woman who initiated the critique.</p>

<p>There are ups and downs to doing a major in Philosophy and a minor in Women&rsquo;s Studies. For the first part, and maybe this is endemic to post-structuralists, it gives you the leeway to critique anything, at any time, on any basis. The critique may be correct (within a narrow frame of reference), but cannot subsume the human, emotional factor in the response it will (often predictably) invoke.</p>

<p>I have also denigrated <a href="http://en.wikipedia.org/wiki/Radical_feminism">Radical Feminism</a> as a degenerate, self-destructive current within feminism (as opposed to <a href="http://en.wikipedia.org/wiki/Third-wave_feminism">Third-wave Feminism</a>, <a href="http://en.wikipedia.org/wiki/Marxist_feminism">Marxist Feminism</a>, <a href="http://en.wikipedia.org/wiki/Post-feminism">Postfeminsim</a>, etc.), not intending to offend RadFem advocates, but simply as an extrapolation of my work (supported by my professors), on the theoretical insufficiency/incoherence of RadFem (and most second-wave feminism). I&rsquo;ve had these conversations in person (and in symposia), and it was most productive; on blogs and Twitter, they become a perceived threat; whether to received dogma or social positioning I do not know. I don&rsquo;t want reiterations of my undergrad theses to become a perceived micro-aggression. I don&rsquo;t hate people who consider RadFem a constructive analysis of their social situation, and perhaps it <em>is</em> a privileged position to consider philosophy <em>qua</em> philosophy; but I do not see a possibility of constructive dialogue without the possibility of objective reasoning about basic concepts.</p>

<h3>Privilege as #firstworldproblem</h3>

<p>We have to admit, at some point, that the ability to discuss privilege is, in and of itself, a privilege. In sub-Saharan Africa, one does not have the opportunity to discuss the privilege of the warlords who have conscripted one, at the age of eleven or twelve, into an &ldquo;army&rdquo; intent on the rape, murder and subjugation of surrounding villages.</p>

<p>This is the irony of discussing privilege: to do so, one must have the degree of privilege which allows for its discussion.</p>

<p>Prior to this, there is only the experience of extreme oppression, which does not provide room for dialogue; productive, civil, antisocial, shrill, or otherwise.</p>

<p>Contrary to popular belief, irony is not always comedic. It has equal standing in tragedy. If nothing else, Aeschylus taught us this. For that matter&hellip; Shakespearean tragedy hinges on irony. The fact that ironic humor is the default mode of irony&hellip; I blame ignorance of classical drama, and hipsters.</p>

<h3>Privilege Checking Is Hard</h3>

<p>One of the things I appreciated about Audrey and Jose&rsquo;s session at EduCon was that it made it much easier to engage in reflection before responding. One of the reasons for my critique of Twitter as a medium for Important Topics was that there&rsquo;s an impetus to reply immediately, without time to reflect. There&rsquo;s also decontextualization, opening oneself up to misinterpretation, etc.</p>

<p>Privilege checking is hard. My first (emotional) response to Tom&rsquo;s post was to this:</p>

<blockquote><p>That was when it occurred to me that he might be speaking from a position of privilege as an educator who is exposed to education discourse. He certainly is an educator who was afforded an opportunity to attend a $200 conference in Philadelphia. His experience is not that of educators in other regions of America and even further from those of educators outside America.</p></blockquote>


<p>My initial reaction was: <em>doesn&rsquo;t that exact analysis apply to everyone in this room?</em></p>

<p>You can read my comment (linked above) which (among other things) explicates the the false assumptions (i.e., that I&rsquo;m an educator) in the post; but that isn&rsquo;t the issue. I&rsquo;m trying <em>really hard</em> to check my privilege in these kinds of conversations. Clearly, though, it&rsquo;s hard for everyone, not just me. We need people to call us out. We need people to help us check our privilege. That&rsquo;s what community is about. What I saw in the session, however, that was different from my typical experience was this: I&rsquo;m going to check my own privilege, then explain how you can do the same. Often, what I&rsquo;ve seen on the interwebs is more along the lines of &ldquo;You need to check your privilege or GTFO.&rdquo;</p>

<p>Sadly, this seems to be about as constructive (albeit far less sexist) as the <a href="http://4chan.org">4chan</a> response of &ldquo;Tits or GTFO.&rdquo;</p>

<h3>Concluding Unscientific Postscript</h3>

<p>Whatever else happened, I think this was one of the most illuminating sessions at EduCon. As I mentioned in my reply to Tom&rsquo;s blog post, I think we in the hacker community can learn things from the way this conversation unfolded in the 90 minutes allotted.</p>

<p>To that end, I&rsquo;d like to suggest to my new friends in the education community, that they might like to engage with some of the folks in the hacker community who are working on this very issue. The following list will include people I&rsquo;ve come to respect and appreciate, and people I&rsquo;ve disagreed with both vehemently and disagreeably. N.B. the two sets pretty much have a 100% intersection, and names might be either IRL or nom de web.</p>

<ul>
<li><a href="https://twitter.com/steveklabnik">Steve Klabnik</a></li>
<li><a href="https://twitter.com/ashedryden">Ashe Dryden</a></li>
<li><a href="https://twitter.com/lindseybieda">Lindsey Bieda</a></li>
<li><a href="https://twitter.com/shanley">Shanley</a></li>
<li><a href="https://twitter.com/wilkieii">Dave Wilkinson</a></li>
</ul>


<p>And anti-oppression hackers, here are some educators you might like to follow:</p>

<ul>
<li><a href="https://twitter.com/audreywatters">Audrey Watters</a></li>
<li><a href="https://twitter.com/TheJLV">Jose Vilson</a></li>
<li><a href="https://twitter.com/mdawriter">Melinda D. Anderson</a></li>
<li><a href="https://twitter.com/ShieldsMolly">Molly Shields</a></li>
</ul>


<p>There&rsquo;s so much more to be done, and so much more to be said. This post deserves a sequel, which I hope I will have time to provide in the near future. I want to address so much more, but I&rsquo;ve already gone on for (prior to these parens, 1,845 words according to <code>wc</code>), and I think that&rsquo;s enough for one post.</p>

<p>I&rsquo;m inclined to see how the comments go and direct my follow-up from there. Thanks for reading, please be civil in the comments, and let&rsquo;s work together to find constructive ways of addressing the issues that lie just beneath the surface in our cultural milieu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New from Ruby Jokes: taint_aliases]]></title>
    <link href="http://decomplecting.org/blog/2014/01/23/new-from-ruby-jokes-taint-aliases/"/>
    <updated>2014-01-23T20:08:13-05:00</updated>
    <id>http://decomplecting.org/blog/2014/01/23/new-from-ruby-jokes-taint-aliases</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/ruby-jokes">Ruby Jokes</a> team has a new gem for you that was designed, tested, and released in about an hour this afternoon: <a href="http://ruby-jokes.github.io/taint_aliases">taint_aliases</a>. You can get the full details <a href="https://github.com/ruby-jokes/taint_aliases">on GitHub</a>, but I thought a friendly introduction might make for an enlightening blog post.</p>

<h3>Grundle Your Objects</h3>

<p>You see, not everyone prefers the word &ldquo;taint&rdquo;. Some people are very clinical, and say &lsquo;perineum&rsquo;. Others prefer &lsquo;grundle&rsquo; or &lsquo;fleshy fun bridge&rsquo;. We wanted to give you options, so <code>taint_aliases</code> makes a variety of synonyms available to you.</p>

<p><img class="center" src="http://i.imgur.com/7r7Ml5q.png" title="The Most Interesting Taint In The World" ></p>

<!--more-->


<p>With <code>taint_aliases</code>, you can do things like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;taint_aliases&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">grundle</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">tainted?</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Foo Bar Baz&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">fleshy_fun_bridge</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">tainted?</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, there are other options, but you can find them in the documentation.</p>

<h3>Roadmap</h3>

<p>We&rsquo;re currently at version 0.0.3 of <a href="https://rubygems.org/gems/taint_aliases">the gem</a>, but we plan on adding methods like <code>Object#ungrundle</code> and <code>Object#grundled?</code> before the 1.0 release.</p>

<p>Pull requests are welcome, and&hellip; you&rsquo;re welcome.</p>

<p>P.S. Props to <a href="https://github.com/mgates">Micah Gates</a> for work on the codebase and to <a href="https://github.com/milt">Milt Reder</a> for the conception of this gem while we were taking a break at work.</p>

<h3>Update</h3>

<p>Thanks to a well-timed pull request from <a href="https://github.com/threeifbywhiskey">threeifbywhiskey</a>, the milestone listed above has been met, and I just pushed v1.0.0 of the gem. w00t!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye AT&amp;T, Hello T-Mobile?]]></title>
    <link href="http://decomplecting.org/blog/2013/12/23/goodbye-at-and-t/"/>
    <updated>2013-12-23T21:05:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/12/23/goodbye-at-and-t</id>
    <content type="html"><![CDATA[<p>So I&rsquo;m curious about this <a href="http://guardianlv.com/2013/12/t-mobile-uncarrier-4-0-reportedly-will-buyout-contracts-when-switching/">Uncarrier 4.0</a> thing rumoured to be rolled out by <a href="http://www.t-mobile.com/">T-Mobile</a> in the near future&hellip; I&rsquo;ve considered ditching <a href="http://www.att.com/shop/wireless.html">AT&amp;T Wireless</a> many times, but keep getting dragged back in by upgrades, which seem to take longer and longer to happen.</p>

<p>I tried to get my wife an upgrade for Christmas this year, just to find out <em>both</em> our upgrade dates are far, far in the future&hellip; I&rsquo;m pretty certain we got more frequent upgrades a while back, but the current cycle seems absurd. I was fine with early contract renewals when it meant I got a shiny new phone, but when your renewal date is the same as your upgrade date (24 months), they&rsquo;ve removed all incentive not to switch carriers. Which inidcates to me that perhaps their wireless division is run by idiots, indicating an incentive <em>to</em> switch carriers.</p>

<p>The last counter-incentive to switching is the Early Termination Fee, which, when you&rsquo;re on a family plan and have multiple phones out-of-sync on contract renewal dates, is a bitch to work around. Now, for my part, I&rsquo;m a committed Nexus fan, so I&rsquo;m on an unsubsidised phone anyhow. But with T-Mobile, I can get my Nexus 5 straight from the carrier, Candice can pick out the phone she likes, and we can get more frequent upgrades without a contract.</p>

<!-- more -->


<p>So the real question is, what&rsquo;s the downside?</p>

<p>Well, AT&amp;T does have better overall coverage (and definitely better LTE coverage) than T-Mobile&hellip; for now. But we rarely leave Baltimore except to visit family, and all of the places we do visit family have excellent voice coverage, and we&rsquo;ll be on WiFi at their houses, so&hellip; I&rsquo;m really considering it.</p>

<p>If anyone has made the jump, please let me know in the comments. As soon as T-Mobile rolls out this &ldquo;we&rsquo;ll buy out your contract&rdquo; deal, I&rsquo;m probably ready to jump ship. I&rsquo;ve never had any great love for AT&amp;T, and waiting <em>two years</em> for an upgrade is just stupid. Hell, even getting out of carrier lock-in would be nice, and access to Deutsche Telekom&rsquo;s global data network would be gravy if we start traveling as much as we&rsquo;d like.</p>

<p>Anyhow&hellip; just ruminations for the moment, but&hellip; it could be pretty great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hour of Code: Voight-Kampff for Hackers?]]></title>
    <link href="http://decomplecting.org/blog/2013/12/11/hour-of-code-voight-kampff-for-hackers/"/>
    <updated>2013-12-11T20:20:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/12/11/hour-of-code-voight-kampff-for-hackers</id>
    <content type="html"><![CDATA[<p>So, <a href="http://gizmodo.com">Gizmodo</a> has a great post on the new series of <a href="http://code.org">Code.org</a> PSAs, <a href="http://gizmodo.com/people-who-did-not-get-rich-and-or-famous-coding-want-y-1479863703">&ldquo;People Who Did Not Get Rich and/or Famous Coding Want You to Code&rdquo;</a>. I think <a href="http://csedweek.org/">Computer Science Education Week</a> is a fantastic idea (although IMHO every week should be CSEdWeek), but the whole &ldquo;hour of code&rdquo; thing seemed slightly silly, until now.</p>

<p>Okay, the PSAs keep it silly. Every time someone in those videos says &ldquo;I just did <em>n</em> lines of code&rdquo;, the following script runs through my head:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;I just did </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> lines of code&quot;</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/code/</span><span class="p">,</span> <span class="s1">&#39;coke&#39;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;, and I can&#39;t feel my face!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, I&rsquo;m a terrible person. Also hilarious. Moving on&hellip;</p>

<!-- more -->


<h3>Hacker Exceptionalism</h3>

<p>Usually, the term <a href="http://en.wikipedia.org/wiki/Exceptionalism">Exceptionalism</a> is used in a context of superiority, e.g., <a href="http://en.wikipedia.org/wiki/American_exceptionalism">American exceptionalism</a>. I do believe there is something like &ldquo;hacker exceptionalism&rdquo;, except the &ldquo;exception&rdquo; has nothing to do with superiority, but literally an exceptional case — a corner case for life, if you will.</p>

<p>There&rsquo;s something weird about hackers. I&rsquo;m not lumping everyone who writes code for their day job into this category (frankly, that would be offensive to my sensibilities). I&rsquo;ve written <a href="http://decomplecting.org/blog/2012/05/22/passion/">before</a> about my encounters with people who just code 9 to 5 and then don&rsquo;t think about it and all I can say now is that I wish they would stop (actually, I&rsquo;m not sure many of them think about it at all).</p>

<p>People who grok code have weird brains. That&rsquo;s the theory. It&rsquo;s not new; in <a href="http://www.nealstephenson.com/snowcrash/"><em>Snow Crash</em></a>, Neal Stephenson describes a neurolinguistic virus that can infect the brains of hackers via digital images because of the pathways coding has created in their brains.</p>

<p>There&rsquo;s a chicken-and-egg problem here: are our brains weird because we&rsquo;re hackers, or are we hackers because our brains are weird?</p>

<p>I&rsquo;m not sure there&rsquo;s any way to answer that scientifically until we have longitudinal studies complete with periodic fMRI scans of children as they develop into programmers (or not). So we&rsquo;ll leave the origin story aside for now.</p>

<h3>Voight-Kampff</h3>

<p>In the movie <a href="http://en.wikipedia.org/wiki/Blade_Runner"><em>Blade Runner</em></a> (apologies to Philip K. Dick fans for heading down this particular rabbit-hole), a test called <a href="http://bladerunner.wikia.com/wiki/Voight-Kampff_machine">Voight-Kampff</a> is administered to distinguish humans from replicants.</p>

<p>The idea of a Voight-Kampff test to distinguish humans from hackers isn&rsquo;t new either; in 2006, researchers proposed an (apparently) effective test to separate <a href="http://www.codinghorror.com/blog/2006/07/separating-programming-sheep-from-non-programming-goats.html">programming sheep from non-programming goats</a>.</p>

<p><span class='pullquote-right' data-pullquote='Then I realized: this is like a Voight-Kampff test for hackers.'>
So this &ldquo;Hour of Code&rdquo; thing. I thought it was a cute idea at first, became dubious, got annoyed at the marketing, and stopped paying attention until the new batch of PSAs were covered on Gizmodo (full confession: I was reading <a href="http://valleywag.gawker.com/">Valleywag</a> when I saw it. I can&rsquo;t help myself). Then I realized: this is like a Voight-Kampff test for hackers. My first &ldquo;hour of code&rdquo; was when I was five. that hour stretched into three. Then countless hours followed. For the rest of my life.
</span></p>

<p>The whole &ldquo;everyone should learn to code&rdquo; meme is great; I think everyone should understand the fundamentals of computer science. Not that &ldquo;learning to code&rdquo; is equivalent to &ldquo;understanding CS fundamentals,&rdquo; but it&rsquo;s a step in the right direction. But it&rsquo;s important to distinguish between &ldquo;learning to code&rdquo; and &ldquo;entering a career in software engineering.&rdquo;</p>

<p>I wish the latter were left to true hackers. The ones who are outed by the &ldquo;hour of code&rdquo; when the hour turns into 10,000 hours; the ones who go from &ldquo;I did 5 lines of code!&rdquo; to &ldquo;I did 5k LOCs&rdquo; in about two weeks. That&rsquo;s not going to be everyone. It&rsquo;s going to be a distinct minority. We&rsquo;re corner cases.</p>

<p>Code.org has some great goals, even if the motives seem questionable at times (does it feel to anyone else like &ldquo;everyone should learn to code&rdquo; is in some cases an attempt to rekindle the failed 1990&rsquo;s experiment of &ldquo;commodity programmers&rdquo;?). More than anything else, though, &ldquo;hour of code&rdquo; seems to intorduce a <code>catch</code> block for those of us who throw <code>HackerBrainException</code>. And that&rsquo;s great. Uncaught exceptions aren&rsquo;t good for anyone. This is why we need <a href="http://www.computinginthecore.org/">computing in the core</a> — it&rsquo;s like checked exceptions in the API for public education.</p>

<h3>Computer Science in K-12</h3>

<p>This is the real issue, isn&rsquo;t it? Getting computer science into the standards for K-12 education? Making an &ldquo;hour of code&rdquo; redundant?</p>

<p>Sadly, things don&rsquo;t seem to have changed much since my own <a href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/">negative experiences with coding at school</a>&hellip; but that was in the late 1990&rsquo;s. I would have expected progress since then&hellip; if I were a lot more naïve.</p>

<p>So a message to current students: <strong>Fortuna audaces iuvat</strong> — Fortune favors the bold. Hack everything. Code your math homework. Shit, code your math homework, put hte source on <a href="https://github.com">Github</a>, and let your friends <em>copy</em> that shit. Refuse to do anything without a computer, whether that computer is your phone or a <a href="http://www.cray.com/Products/Computing/XE.aspx">Cray XE6</a>.</p>

<p>If your school doesn&rsquo;t offer CS classes, start your own. <a href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/">Just get hacking</a>. If you throw <code>HackerBrainException</code>, you&rsquo;ll never stop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple: The Obstacle to America's Future?]]></title>
    <link href="http://decomplecting.org/blog/2013/12/09/apple-the-obstacle-to-americas-future/"/>
    <updated>2013-12-09T22:32:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/12/09/apple-the-obstacle-to-americas-future</id>
    <content type="html"><![CDATA[<p>In a brief address to kick off Computer Science Education Week (In conjunction with <a href="http://code.org">Code.org</a>), President Obama called on the nation&rsquo;s youth to give coding a chance:</p>

<iframe width="560" height="315" src="http://decomplecting.org//www.youtube.com/embed/6XvmhE1J9PY" frameborder="0" allowfullscreen></iframe>


<p>It&rsquo;s an understandable, if questionable, sentiment. I&rsquo;ve previously addressed the <a href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/">questionable wisdom, and pitfalls</a>, of the &ldquo;teach every kid to code&rdquo; movement. At the same time, computational literacy is so paramount thate ven learning enough about coding to know whay you <em>don&rsquo;t</em> want to do it seems valuable. But I am a champion of CS education in K-12, so I like the overall tenor of that brief address. But it got me thinking about one of the most egregious roadblocks to progress in software within our economy: Apple.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='Don&#8217;t just download the latest app. Help design it. Don&#8217;t just play on your phone. Program it.'>
The president&rsquo;s exhortation was especially interesting in one very specific regard: the spot at 0:32 where he encourages, Don&rsquo;t just download the latest app. Help design it. Don&rsquo;t just play on your phone. Program it. Well&hellip; I like where this is going, but&hellip; it&rsquo;s not that easy, Mr. President. I&rsquo;m all for anyone ,with the slightest interest, screwing around with code and learning new things. And if you&rsquo;ve got an Android phone (among others, but I&rsquo;m trying to keep this simple), that&rsquo;s great. You can download <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a> from <a href="https://google.com">Google</a>, for free. You can put your phone in developer mode, and install whatever you want. Easy peasy. And hey, want to distribute that to your friends? Pay $25, one time, you&rsquo;re set.
</span></p>

<p>If you&rsquo;re locked into Apple&rsquo;s totalitarian ecosystem, alas, it&rsquo;s not that easy. You&rsquo;ll need to pay US$99 per year for the privelege of running your own code on your own device. And should you want to publish that? Well, Apple&rsquo;s going to review and nitpick and make sure <em>they</em> want it in their store. And charge <em>you</em> for the privilege of having the opportunity to add value to their platform. And hell, if your friends are at all savvy and have Android phones, just send them the APK or (even better), open source your project and let them build it themselves. This all works great on Android. On iOS&hellip; not so much.</p>

<p>I sometimes go overboard giving my friends with iOS devices a hard time. It&rsquo;s almost as bad as when Windows was still relevant and I was pushing Linux on everyone. It&rsquo;s about <em>freedom.</em> Just like with Windows back in the day, the constant reply is one of:</p>

<ol>
<li>I don&rsquo;t need to code for/have control over my device, this works fine for me.</li>
<li>But I&rsquo;ve waaaasted so much money on aaaaaps!!!!</li>
</ol>


<p>Welcome to vendor lock-in. It&rsquo;s no excuse, and if we <em>really</em> care about the next generation becoming hackers and makers, not just consumers, we need to reject Apple&rsquo;s bullshit, reject Micorsoft&rsquo;s (decreasingly relevant) bullshit, and focus on open systems. This doesn&rsquo;t have to be Android. <a href="http://www.ubuntu.com/phone">Ubuntu Phone</a> looks promising, <a href="http://www.mozilla.org/en-US/firefox/os/">Firefox OS</a> <em>might</em> not be more Mozilla vaporware, and <a href="http://jolla.com/">Jolla</a> looks incredibly promising.</p>

<p>But what Apple lacks in marketshare, it maintains in mindshare. You want irony?</p>

<iframe width="420" height="315" src="http://decomplecting.org//www.youtube.com/embed/VtvjbmoDx-I" frameborder="0" allowfullscreen></iframe>


<p>In 1984, Big Brother was IBM. Now when I watch this, I see a WWDC keynote.</p>

<p>I don&rsquo;t think iOS is compeltely ill-conceived. Almost, but not completely. But if Apple will not open their platform, and their ecosystem, they are not helping to encourage the next generation of makers, and they are encouraging precisely the opposite attitude toward software that <a href="http://code.org">Code.org</a> and <a href="http://csedweek.org/">Computer Science Education Week</a> were founded to promote.</p>

<p>If I may be permitted to pay tribute to Marcus Cato, I will simply conclude by stating:</p>

<h3>POMUM DELENDA EST</h3>

<p><strong>Update:</strong> There&rsquo;s some lively discussion on <a href="https://news.ycombinator.com/item?id=6878922">Hacker News</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Matters - Followup]]></title>
    <link href="http://decomplecting.org/blog/2013/11/20/github-matters-followup/"/>
    <updated>2013-11-20T23:36:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/20/github-matters-followup</id>
    <content type="html"><![CDATA[<h4>Mea Culpa</h4>

<p>I made some mistakes in my last post. First off, I&rsquo;d like to apologize to <a href="http://ashedryden.com/">Ashe Dryden</a> for referring to her as Ms. Dryden while I referred to <a href="http://jcoglan.com/">James Coglan</a> by his full name. I had no intention of explicitly implying Ashe&rsquo;s gender; my usual writing style is to refer to people by their full name initially and to use an approrpiate title thereafter. But upon review I realized I referred to Ashe as &ldquo;Ms. Dryden&rdquo; in subsequent references, while I referred to James Coglan as &ldquo;James Coglan&rdquo; both times I mentioned him.</p>

<p>I&rsquo;m sorry about that. It was an oversight, and if I had been paying better attention, the second reference to Mr. Coglan would have been &ldquo;Mr. Coglan&rdquo; for parity. But as I failed to achieve parity, and Ashe expressed that she preferred &ldquo;Ashe Dryden&rdquo; to &ldquo;Ms. Dryden&rdquo; in general, I decided to <code>s/Ms./Ashe/g</code> the post. It is now corrected.</p>

<!-- more -->


<h4>I missed some things</h4>

<p>My post was mostly in response to the <a href="https://blog.jcoglan.com/2013/11/15/why-github-is-not-your-cv/">Github Is Not Your CV</a> sentiment, as well as the <a href="https://news.ycombinator.com/item?id=6728417">Hacker News comments</a> related to Ashe&rsquo;s post, rather than the diversity/privilege statistics offered by Ashe&rsquo;s <a href="http://ashedryden.com/blog/the-ethics-of-unpaid-labor-and-the-oss-community">original article</a>. I had no intention of discounting the privilege issues involved in having the time and resources to contribute to OSS or produce original experiments/libraries/applications on <a href="https://github.com">Github</a>.</p>

<p>I didn&rsquo;t disagree with any of that. I still think it&rsquo;s a good idea to make projects public and make that part of your portfolio. I never suggested that hiring managers should use Github as the only criterion&hellip; but I do think it demonstrates a commitment to professional development, to honing your craft.</p>

<p>I&rsquo;m curious if the cited statistics on OSS contributions refer to &ldquo;have commits to major OSS projects&rdquo; or &ldquo;have code samples online.&rdquo;</p>

<p>My reference was to the latter. Not that I wouldn&rsquo;t love to hire people with commits to Rails or core.async; but for the most part, I want to see what you build in your spare time. Your production code is probably proprietary and covered by an NDA. So I want to see what I <em>can</em> see.</p>

<p>If you don&rsquo;t have a Github profile, that&rsquo;s okay. We can still talk. Either way, I&rsquo;m probably going to want to pair with you or give you a take-home assignment before the next interview round. Those are great ideas that both Ashe and James proposed as alteratives to Github reviews.</p>

<p>I see them more as complements than alternatives, but ideally seeing both would be wonderful.</p>

<p>I still love Github as part of the screening process. Especially if your Github is messy. I can see the crappy Rails CMS you wrote two years ago as practice, and the Clojure OAuth library you comitted to last week, and see the growth you&rsquo;ve made in that time. That&rsquo;s the value of Github to me.</p>

<p>I want to see professional development, not unpaid labor. I want to know you <em>don&rsquo;t consider hacking labor, but play.</em> Not because I want you to work 80 hours a week; I don&rsquo;t, because that&rsquo;s the road to burnout. But I want to know you love this shit and, in a socialist utopia, would do it for free.</p>

<h4>Damn reality</h4>

<p>Yeah, I know hacking on OSS is a privilege we don&rsquo;t all enjoy. Neither is going to college or learning to code. These are all things we need to improve access to as a community, but the nice thing about Github, pairing, and code challenges, is that they can balance out hte privilege issues of college and other factors. For me, as a hiring hacker, I care more about work than degrees. Github is one way to show that, but pairing etc. are equally valid.</p>

<h4>Conclusion</h4>

<p>OSS hacking is a privilege: I&rsquo;ve done a fuckton less since I had a kid; mostly work-related stuff. But it still matters, and it&rsquo;s accessible to anyone with a computer and an internet connection. That in and of itself is discriminatory, but I can&rsquo;t see how you&rsquo;re going to be a hacker to begin with sans those things.</p>

<p>I think my main objection is the Harrison Bergeron argument: we&rsquo;re using statistics about privilege to say &ldquo;let&rsquo;s not use this (IMHO) valid metric because the privileged have access to this resource&rdquo; instead of &ldquo;how can we change society to improve access to this resource.&rdquo;</p>

<p>Yeah, the second proposition is harder. And you can discount the utility of the metric like James Coglan, or reject the premise like Ashe Dryden, but in either case there is a realpolitik question:</p>

<ol>
<li>Hiring managers see value in this metric.</li>
<li>Some of them probably have valid reasons for this.</li>
<li>Access is influenced by social privilege.</li>
<li>We can either (a) throw the baby out with the bathwater, or (b) try to address the underlying issue.</li>
</ol>


<p>The typical response is 4(a), for whatever reason. I&rsquo;d like to see 4(b), but I don&rsquo;t know how to make it happen. I&rsquo;d rather see theories on how this can be achieved than see strategies and arguments for 4(a).</p>

<p>Anyhow, like I said&hellip; the statistics are damning, but I&rsquo;d rather see the statistics change. How do we get more women into open source? I think OSS contributions have value as one factor among many, but I also think it&rsquo;s a value for <em>the individual developer,</em> not just as a hiring criterion. The low contribution ratio of women and minorities to OSS is the problem, not the fact that it&rsquo;s a metric used for candidate evaluation. But that&rsquo;s a whole different issue, and I don&rsquo;t have an answer for fixing that&hellip; yet.</p>

<p><strong>tl;dr apologies to Ashe; inequality and privilege are real; fix society, don&rsquo;t discount the value of OSS/Github contributions</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Github Is Not Your CV.  It Still Matters]]></title>
    <link href="http://decomplecting.org/blog/2013/11/19/so-github-is-not-your-cv-it-still-matters/"/>
    <updated>2013-11-19T21:22:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/19/so-github-is-not-your-cv-it-still-matters</id>
    <content type="html"><![CDATA[<p>It&rsquo;s funny, a few days before the OSS-as-hiring-criteria debate emerged on Twitter and HN — mostly stemming from <a href="http://david.heinemeierhansson.com/2013/the-perils-of-mixing-open-source-and-money.html">this post</a> by <a href="https://twitter.com/dhh">DHH</a> and <a href="http://ashedryden.com/blog/the-ethics-of-unpaid-labor-and-the-oss-community">this post</a> by <a href="https://twitter.com/ashedryden">Ashe Dryden</a> — I had just posted <a href="http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2/">Just Get Hacking (Part 2)</a>, encouraging prospective developers lacking a CS background who wanted to get hired to <strong>put lots of code on Github.</strong></p>

<p>There are good counterarguments to this. Github is not a portfolio, it&rsquo;s where your public code lives. <a href="https://github.com/canweriotnow">My Github</a> has a bunch of projects I should maybe delete; stalled or abandoned projects, one-off projects with poor test coverage, etc. It&rsquo;s not really a representative sample of my <em>production</em> code. But that&rsquo;s not why I think it matters.</p>

<p>In her post, Ashe provides several excellent alternatives to OSS contributions as evaluation criteria; these include:</p>

<ul>
<li>Pair with the prospective hire</li>
<li>Contract the prospective hire for a week or two</li>
<li>Ask for samples</li>
</ul>


<p>When considering potential hires, Github is not everything. At <a href="http://anestuary.com">An Estuary</a>, we definitely request (and prefer) a Github profile with applicant CVs; but it&rsquo;s not about contributions to OSS projects (i.e., the &ldquo;unpaid labor&rdquo; critiqued in Ashe Dryden&rsquo;s post).</p>

<p>The focus of our company is on professional development. We not only dogfood technically (i.e., using our own software), but also culturally. We want to hire people who are focused on their own professional development, and Github is a good place to document that.</p>

<p>(Also&hellip; code samples? If you wrote something worth showing me, why isn&rsquo;t it on Github, in a gist, on JSFiddle, etc.?)</p>

<p>Our main product is designed to help educators document their professional development. Hackers like us have Github, so if we&rsquo;re not using it&hellip; something might be amiss.</p>

<p>So when I&rsquo;m looking at a Github profile evaluating a potential hire, I&rsquo;m not looking for accepted pull requests to <a href="https://github.com/rails/rails">Rails</a>. I mean, that would be a plus, but&hellip;</p>

<!--more-->


<h3>A Commitment to Professional Development</h3>

<p>That&rsquo;s what I want to see. Not a portfolio, as <a href="http://blog.jcoglan.com/2013/11/15/why-github-is-not-your-cv/">James Coglan suggests</a>. He&rsquo;s not wrong, but as a hiring hacker, at least from my perspective, he misjudges the value of Github profiles.</p>

<p>For me, evaluating Github profiles for potential hires is about a commitment to a <em>profession.</em> And that&rsquo;s not something that&rsquo;s real in software at the moment, but it&rsquo;s something we need to develop.</p>

<p>If building software is <em>just a paycheck,</em> I don&rsquo;t really want to work with you. No offense, I&rsquo;m sure there are plenty of organizations out there that are fine with that. You should work for them. I have, and I hated it, but find your own bliss. I don&rsquo;t want you to miss out on family and kids and friends; I don&rsquo;t want to miss out on those either. But in those couple of hours between the kids going to bed and sleep closing in&hellip; well, I&rsquo;m hacking away on some odd side project, and that&rsquo;s who I want by my side while we&rsquo;re trying to hack things better.</p>

<p>There&rsquo;s a conflation of OSS contributions (i.e., unpaid labor contributing to free software your company or prospective company uses to make a profit) and having a Github (or Bitbucket or whatever) account that demonstrates a commitment to honing your craft over time. Both are admirable, but I want to hire smart people who are committed to always be learning. Github is a good way to demonstrate that quality, even if yours (like mine) is full of projects that went nowhere.</p>

<p>Sorry, I need evidence of commitment. If you have patches in or Rails or clojure.core that&rsquo;s bonus points. But your commitment is what matters to me:</p>

<blockquote class="twitter-tweet" lang="en"><p>Timeframes in which you cannot become a good programmer: 2 weeks; 2 months; 2 years. Sorry. 10,000 hours. Not my fault. Sorry.</p>&mdash; Gary Bernhardt (@garybernhardt) <a href="https://twitter.com/garybernhardt/statuses/397833212019232769">November 5, 2013</a></blockquote>


<script async src="http://decomplecting.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>10,000 hours. That&rsquo;s what it takes. Not that you&rsquo;ve put that time in already, but I need to believe you&rsquo;re committed to putting the time in. Sorry if that&rsquo;s a hardship. There are other jobs.</p>

<p>Now I&rsquo;m close to sounding like a jerk, but it&rsquo;s just the reality. If I was a flight instructor who certified a pilot who hadn&rsquo;t put in their hours, I&rsquo;d be criminally negligent. Software matters too. Just look at <a href="http://healthcare.gov">healthcare.gov</a></p>

<h3>Privilege isn&rsquo;t just about OSS</h3>

<p>One of the main points of Ashe Dryden&rsquo;s article is that OSS is dispropotionally authored by privileged groups, i.e. young white males. While this is clearly backed by the data, the reasons for this are not limited to the software industry; most professions (and yes, I am considering software engineering a profession) have similarly disproportionate distributions. <a href="http://www.nalp.org/minoritieswomen">Lawyers</a> and <a href="http://nces.ed.gov/fastfacts/display.asp?id=72">doctorates in general</a> skew in the same direction. Why? For the same reasons addressed in the argument against OSS as hiring criteria: young white males disproportionately have the free time and resources available to pursue advanced degrees, attend professional school, etc.</p>

<p>Now, in software, we have an edge case in which a degree isn&rsquo;t necessarily required in the first place. But something has to stand in for that, doesn&rsquo;t it? Some demonstration of competency?</p>

<p>I think this was one of the more salient points made in <a href="https://news.ycombinator.com/item?id=6728417">the Hacker News thread</a> on Ashe Dryden&rsquo;s post — all hiring criteria are discriminatory in one way or another, e.g. requiring a Master&rsquo;s degree discriminates against people with only a Bachelor&rsquo;s — and surprise, surprise, individuals privileged by race or gender are more likely to secure the higher degree.</p>

<p>So I think the &ldquo;Github hiring criterion&rdquo; is a bit of a red herring. Privilege is an issue across the board, and it really has nothing to do with OSS or Github profiles. I&rsquo;m in my first hiring role as a developer, but I find reviewing applicants&#8217; Github profiles incredibly useful; not as in &ldquo;we will talk to this person but not this other one,&rdquo; but guiding what questions to ask and what paths to explore in the interview.</p>

<p>tl;dr Hiring people is hard. Github provides <em>limited</em> data to drive those decisions. It&rsquo;s easier to make confident decisions with more data.</p>

<h5><em>Postscript</em></h5>

<p>If Github is privilegey, than what is <a href="http://careers.stackoverflow.com/">Careers 2.0</a>? You either need an awesome Github rep or <a href="http://stackoverflow.com">StackOverflow</a> karma <em>just to get a profile.</em> And answering James Coglan&rsquo;s critique — Careers 2.0 actually <em>is</em> a portfolio; you feature your best Github repos, best blog posts, etc.</p>

<p>Maybe another time I&rsquo;ll go into <a href="http://coderwall.com">Coderwall</a> or <a href="http://coderbits.com">Coderbits</a> as alternatives.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking (Part 2)]]></title>
    <link href="http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2/"/>
    <updated>2013-11-13T00:09:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/13/just-get-hacking-part-2</id>
    <content type="html"><![CDATA[<h3>The Important Stuff</h3>

<p>So <a href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/">last post</a>, I pretty much said &ldquo;just do it,&rdquo; and explained that the companies you <em>want</em> to hire you will care less about your background than your demonstrable coding skills.</p>

<p>In this post, I want to look a little more closely at the skills that matter, and the specific areas that the &ldquo;best&rdquo; (IMHO) companies will focus on. I may be biased, but this is the stuff I care about when I&rsquo;m interviewing developers (beyond basic coding chops), and I think I&rsquo;m pretty smart.</p>

<h3>Testing, Testing, Testing</h3>

<p>So you&rsquo;re writing code that runs, runs correctly, and runs consistently. That&rsquo;s awesome. But when it comes to writing production code for a real company, you need to <em>know</em> it&rsquo;s correct, in advance. Especially with dynamic languages, when there&rsquo;s no compiler to refuse to build faulty code, testing is paramount.</p>

<p>So when you&rsquo;re working on these little personal projects, and throwing them on <a href="https://github.com">Github</a>, do a few things:</p>

<!-- more -->


<ul>
<li>Write tests. If you&rsquo;re using Ruby, I recommend <a href="http://rspec.info/">RSpec</a>.</li>
<li>Use <a href="https://travis-ci.org/">Travis CI</a>. You&rsquo;ll learn about <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>, and it&rsquo;s free for open source.</li>
<li>Use <a href="https://codeclimate.com/">Code Climate</a>. It&rsquo;s like automated code review, and also free.</li>
<li>Try <a href="https://coveralls.io/">Coveralls</a>. It&rsquo;ll help you make sure you actually are testing everything.</li>
</ul>


<p>Plus Travis, Code Climate, and Coveralls will give you little badges for your README.md on Github so you can see how your project is doing at any time.</p>

<p>Read up on practices for <a href="http://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</a>, because it matters to the people you really want to work for, and as an aspiring software craftsman, it needs to matter to you.</p>

<h3>Collaboration</h3>

<p>I mentioned the importance of coding with others last post, but I can&rsquo;t emphasize it enough. Look for opportunities for pair programming, even if it&rsquo;s remote. There are cool apps you can use for that now, like <a href="https://koding.com/">Koding</a> (and others), but in a pinch there&rsquo;s always <a href="http://www.vim.org/">vim</a> and <a href="http://tmux.sourceforge.net/">tmux</a>&hellip; which are tools you&rsquo;ll want to know anyhow.</p>

<p>And which brings me to my next point&hellip;</p>

<h3>Unix or GTFO</h3>

<p>Yeah, code is more portable than it has ever been. You can develop Ruby or Clojure or Node.js on Linux, Solaris, OS X, Windows, probably even Haiku&hellip; but you need to understand your deployment environment, which is going to be some kind of *nix unless you&rsquo;re doing .NET (which you&rsquo;re clearly not, if you came to me for advice).</p>

<p>In addition, the closer your dev environment is to your production environment, the less risk there is of weird heisenbug inconsistencies.</p>

<p>So learn <em>some</em> kind of *nix, whether it&rsquo;s OS X, Linux, or Solaris, or whatever. And dig down; use the command line. Learn your tools, learn the <code>git</code> command line, don&rsquo;t just rely on the Github GUI apps etc. Learn <code>bash</code> or <code>zsh</code>. Learn how a combination of <code>find</code>, <code>grep</code>, and <code>xargs</code> can save your ass. It&rsquo;ll make your life easier as a developer, and it&rsquo;s vital when it comes to&hellip;</p>

<h3>DevOps</h3>

<p>Long ago, in a galaxy far, far, away, developers simply wrote application code and the systems that hosted and served that code were managed by a cabal of wizened neckbeards of the Sysadmin clan. Now, in our more enlightened (or is it benighted?) age, development and operations have blurred their lines and DevOps was born.</p>

<p>In many cases, this is just an excuse for developers to be burdened with sysadmin duties; sometimes, it&rsquo;s perfectly sensible as many of the best deployment options are SaaS (Something-as-a-Service) thingamabobs. But it&rsquo;s important to get at least the basics.</p>

<p>So when you&rsquo;re looking for someplace to put your pet project web apps, put them on <a href="http://heroku.com">Heroku</a>. It&rsquo;s free for a single web dyno and no workers, and many of the &ldquo;add-ons&rdquo; (like Postgres, Redis, ElasticSearch, etc.) that are technologies you might want to play with have free tiers as well.</p>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> is Level 80 territory as far as I&rsquo;m concerned, but if you get into the DevOps thing, and want to experiment with tools like <a href="http://www.opscode.com/chef/">Chef</a>, they&rsquo;ll also give you some free time with EC2 instances to play around.</p>

<h3>Summary</h3>

<p>It all comes down to &ldquo;Just Get Hacking&rdquo;. But there are some specifics prereqs for modern software engineering, and if you can make yourself pick those up along the way, all the better. Keep it fun, and keep learning. That&rsquo;s what matters most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Get Hacking]]></title>
    <link href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/"/>
    <updated>2013-11-12T00:27:00-05:00</updated>
    <id>http://decomplecting.org/blog/2013/11/12/just-get-hacking</id>
    <content type="html"><![CDATA[<p><em>This post is a follow up to a previous entry, <a href="http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer/">&ldquo;Letter to a Young (Or New) Programmer&rdquo;</a>.</em></p>

<p>So you&rsquo;ve been working through some of those excellent online resources, like <a href="http://learncodethehardway.org/">Learn Code The Hard Way</a>, or <a href="http://codeschool.com">Code School</a>, or whatever. You think you can build something now, and you want to get out there in the world and hack things better, but there&rsquo;s this one little problem&hellip; you have a degree in Philosophy or Psychology or no degree at all, and no résumé-worthy coding experience.</p>

<h4>Not. A. Problem.</h4>

<p>Well, not necessarily a problem. There&rsquo;s an easy solution. Just. Get. Hacking.</p>

<p>So you don&rsquo;t know about XP, Agile, Scrum, Kanban, Waterfall&hellip; there&rsquo;s always <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>.</p>

<p>So you haven&rsquo;t built an Enterprise Expert System with the AbstractVisitorFactoryAntiPatternCringeGenerator pattern&hellip; I told you to make an account on <a href="https://github.com">Github</a>, didn&rsquo;t I? And I know you take my advice because you&rsquo;re building actual goddamn software.</p>

<p>Put your stuff on Github. Ask for help on IRC.</p>

<p>Find projects that interest you, fork &lsquo;em, submit pull requests. Lots of projects even have issues labeled as &ldquo;suitable for n00bs&rdquo;.</p>

<!-- more -->


<h4>The Enterprise Dilemma</h4>

<p><span class='pullquote-right' data-pullquote='I can tell you something about those places. You don&#8217;t want to work there.'>
Okay, sure. There are places out there that care more about your résumé and pedigree than your coding chops. I can tell you something about those places. You don&rsquo;t want to work there. I mean, getting your foot in the door is a good thing and all, but in the long run, you&rsquo;ll hate your life and maybe even learn to hate coding, and I don&rsquo;t want to see you go down that road. There are so many of us who narrowly escaped that kind of enviroment that we could form our own support group. Don&rsquo;t even worry about it.
</span></p>

<p>Any shop worth working at cares so much more about your coding chops, your potential, your intelligence than bullshit like résumés and academic credentials that if you can demonstrate your ability and still don&rsquo;t get the job, it&rsquo;s a blessing.</p>

<p>On the other hand, you <em>do</em> need a first coding job. And if you&rsquo;re not getting it based on your Github activity, you&rsquo;re probably getting it based on nepotism.</p>

<p>How does this happen? Still goes back to Github, IRC, meetups, etc. So go to some meetups. Talk to people, go to the pub nights, go to the open hack nights. Hack on open source projects, submit pull requests, get in on some projects that will get you recognized. Eventually, you&rsquo;ll have hacker friends who will hire you or recommend you to take over their shitty Enterprise jobs that you can use to build your résumé should you go down that route. It&rsquo;s not that hard. Hang out with nerds, learn the craft, make connections. Programming is one of the few fields where it really is <em>what you know,</em> but who you know can help too. But those connections are best made by being a badass hacker.</p>

<h4>Open Source is the Key</h4>

<p>At the end of the day, though, even if you do all sorts of networking at confs and meetups and the like, you need a strong presence in the Open Source community. I can&rsquo;t emphasize this enough: <strong>PUT YOUR CODE ON GITHUB.</strong></p>

<p>Or Bitbucket or whatever if you prefer, but open source that shit, get other people involved, and get involved in other people&rsquo;s projects.</p>

<p>I&rsquo;m in the position of having to evaluate and hire developers at <a href="http://anestuary.com">An Estuary</a>, and since I want to run the dev shop I wish existed, I&rsquo;m trying to hire that way. When we list positions, we require a Github URL because I want to see what you do, not what your former employers think of you. I assume they&rsquo;re &ldquo;former&rdquo; (or soon-to-be &ldquo;former&rdquo;) for good reason. When we interview you, I want to talk about your code, not your former supervisor&rsquo;s probable inferiority complex.</p>

<p>In summary, just get hacking. Just keep hacking. Build cool shit. Show it to the world. Talk to other nerds. Maybe try some remote pairing (Tweeting with the hashtag #pairwithme is often productive). But just make stuff. Then show me what you can do when you want a job. If you start off with a great company, that should be all you need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maybe EdTech Is Another Leaky Abstraction]]></title>
    <link href="http://decomplecting.org/blog/2013/09/30/maybe-edtech-is-another-leaky-abstraction/"/>
    <updated>2013-09-30T20:26:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/30/maybe-edtech-is-another-leaky-abstraction</id>
    <content type="html"><![CDATA[<p>Working in the EdTech sector, I&rsquo;m perpetually vexed as I try to determine what exactly &ldquo;EdTech&rdquo; is and, <em>a fortiori,</em> what <em>effective</em> EdTech should look like. Perhaps a little background might be in order.</p>

<p>As I&rsquo;ve mentioned before, my academic training is in philosophy. Computer Science was more of an avocational intellectual pursuit because I enjoyed math and symbolic logic. Life is full of surprises, eh?</p>

<p>One of the fundamental divisions in philosophy is between &ldquo;analytic&rdquo; and &ldquo;continental&rdquo; philosophy. These are vague and overlapping spheres, but the reduction comes down to whether philosophy is the handmaiden of science (analyitc school), or whether philosophy is something larger with a complex (sometimes supportive, sometimes critical) relationship with science.</p>

<p>I fell firmly on the &ldquo;continental&rdquo; side, for the most part. It was always the critical power of philosophy that fascinated me. So, what does this have to do with EdTech?</p>

<!--more-->


<h3>Technology as the Handmaiden of Education</h3>

<p>This is the problem. Our typical view of &ldquo;educational technology&rdquo; is that we can produce technological tools to support the same tried, tired pedagogical techniques that have (sort of) worked (for a minority of the population) for decades.</p>

<p>This is wasteful. This is stupid, and also wrong.</p>

<p>In business, where technology has succeeded it has done so because it has revolutionized practices, made redundant unnecessary labor, and increased efficiency by many orders of magnitude. I&rsquo;ll (graciously) bracket off my opinions about the unfair distribution of the gains in productivity, for the sake of brevity and focus.</p>

<p>Likewise in science, our rate of accumulation of knowledge about the physical world has increased exponentially, not because we have expected technology to serve the same processes that we accepted as &ldquo;best practices&rdquo; back when we had only stone knives and bear skins to work with, but because the rate of technological progress has disrupted (improved) the very processes by which scientific discovery occurs.</p>

<p>Now, as (to borrow from both Marcuse and Heidegger) technology is very specifically the <em>science</em> of <em>technics,</em>
it might be argues that the sciences are the least &ldquo;disrupted&rdquo; by technological advancement; for the most part, they are themselves advanced. But paradigm shifts in technology have played a role in the Kuhnian paradigm shifts in scientific understanding as well.</p>

<h3>And Education?</h3>

<p>First, let us agree that education is no science, not even a &ldquo;soft science&rdquo; like sociology or psychology. to be sure, at its best it is informed heavily both by those soft sciences as well as slightly harder sciences like cognitive science, for example. But education itself is no science.</p>

<p>In this regard, scientific and technolological advances should in and of themselves present a material critique of the process of pedagogy as it is practiced; technology is the ultimate tool for cultural transformation, if not (ultimately) the transformation of the meaning of what it is to be human.</p>

<p>Fundamentally, when correctly utilized, technology is transformative. And that&rsquo;s not what we&rsquo;re seeing with EdTech.</p>

<p>Smartboards, blended learning, flipped classrooms, Blackboard, Moodle, an iPad for every student, I would go on but you can get better buzzwords from the <a href="http://www.teacheripsum.com/">Teacher Ipsum</a> generator. It&rsquo;s pretty much all a bunch of overpriced junk that supports the Same Old Shit in the classroom, with the added benefit of shiny tech press for the school, the district, whatever.</p>

<p>I&rsquo;m not playing down the role of technology in education. Quite the opposite, in fact. I&rsquo;m lamenting that billions of dollars are being spent on &ldquo;EdTech&rdquo; that isn&rsquo;t impactful, that isn&rsquo;t transformative, that simply lends the sheen of shiny tech to tired pedagogy that should have been retired decades ago.</p>

<h3>What Is To Be Done?</h3>

<p><span class='pullquote-right' data-pullquote='Basically, if your use of technology in the classroom isn&#8217;t transformative, you&#8217;re Doing It Wrong™.'>
For me, it&rsquo;s fairly simple. Technology is successful where it both disrupts and transforms (for the better) the domain to which it is applied. When applied badly (and the examples are too numerous to mention), it becomes one more learning curve, one more obstacle, to doing the Same Old Shit the Same Old Way. Applied effectively, however, technology fundamentally transforms the problem domain and, necessarily, the effective approaches to the domain. Basically, if your use of technology in the classroom isn&rsquo;t transformative, you&rsquo;re Doing It Wrong™. If the tech you use doesn&rsquo;t fundamentally alter the way you think about teaching, learning, etc., the tech is probably either unnecessary or misutilized.
</span></p>

<p>In the title, I suggested that &ldquo;EdTech&rdquo; is a &ldquo;leaky abstraction.&rdquo; The term comes from an article by <a href="http://www.joelonsoftware.com/AboutMe.html" title="Joel Spolsky">Joel Spolsky</a> entitled <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" title="Leaky Abstractions">&ldquo;The Law Of Leaky Abstractions&rdquo;</a>. The tl;dr is: all (non-trivial) abstractions are, to some degree, leaky; that is, they build on top of something concrete and messy while removing the messy details from the public interface. At least, that&rsquo;s how we&rsquo;d describe it in the software world. Grasping to define something like &ldquo;EdTech&rdquo;, I think the parallel I&rsquo;d like to draw is that the very term &ldquo;EdTech&rdquo; contains what it cannot possibly contain (bonus points if you catch that reference). &ldquo;Educational Technology&rdquo; refers to technology <em>designed for</em> education, technology <em>used in the serivce of</em> education, and also technology tangentially related to education. Unfortunately, this is a boolean <code>and</code>, leaving us with the union of >= 3 overlapping sets, wherein the intersections and complements are probably more interesting. The union of the sets contains many subsets that really aren&rsquo;t all that useful or interesting. But we don&rsquo;t seem to be doing much winnowing.</p>

<p>Back to the philosophy lesson: technology is not there to be the handmaiden of tried and tired pedagogy. Technology is there to, in its very essence, provide an <em>explicit critique</em> of pedagogy in general.</p>

<p>So how do we fix this?</p>

<p>We need better ways of evaluating technology in education. We need professional development solutions to ensure that educators have the skills to properly exploit the tech they have available. We need to ditch our preconceptions about what it means to teach any given subject and look at how technology has changed that domain in the real world (technophobic math teachers, I&rsquo;m looking at you!).</p>

<p>We need to forget everything we know about education, and reinvent everything with the new tools at hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Letter to a Young (Or New) Programmer]]></title>
    <link href="http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer/"/>
    <updated>2013-09-29T00:15:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/29/letter-to-a-young-or-new-programmer</id>
    <content type="html"><![CDATA[<p>I get it. You went to college, graduated, got a job, and it&rsquo;s not what you wanted, hoped for, or whatever. Or maybe you&rsquo;ve been in the same job for years, and it&rsquo;s just no fun anymore. And you look at your friends who are hackers. Yeah, we&rsquo;re anti-social, maybe kinda jerks, but we have <em>so much fun</em> at work, and get pretty well compensated for <em>playing.</em></p>

<p>And maybe you think, &ldquo;I&rsquo;ll go back to school and get a second B.S. in Computer Science!&rdquo;</p>

<p>Chill out.</p>

<p>Maybe you&rsquo;re just guessing this whole software thing is for you and you can&rsquo;t wait to get started!</p>

<p>Chill out.</p>

<p>I&rsquo;m going to encourage you, don&rsquo;t get me wrong. But I&rsquo;m also going to encourage you to be realistic. Because I want you to be successful, not just to sprint down a blind alley. We&rsquo;ll get through this, together.</p>

<h3>Lower your expectations</h3>

<p>Look, it&rsquo;s not all rainbows, lollipops and gumdrops. It&rsquo;s not. For me, coding is a pleasure and a privilege, but it&rsquo;s not for everyone. There are <em>extremely shitty jobs</em> out there, doing what I do, and just because I&rsquo;m on cloud nine, doesn&rsquo;t mean you will be.</p>

<p>Furthermore, even though it&rsquo;s a demand-side market (there are far more job openings than talented developers), the really great jobs are still competitive as hell.</p>

<h3>Still here?</h3>

<p>I haven&rsquo;t dissuaded you? Good. Good, young padawan.</p>

<!-- more -->


<p>Since (for the couple of people toward whom this post is targeted directly) I haven taken it upon myself to train you as your Jedi master, I&rsquo;m going to point you toward <a href="http://ruby-lang.org" title="Ruby">Ruby</a> as your first language. It&rsquo;s not a perfect language, but it is beautiful, and presents a useful paradigm (object-oriented programming) in the purest form possible. So let&rsquo;s start with some Ruby resources.</p>

<p>Here&rsquo;s your pre-frosh curriculum:</p>

<ul>
<li><a href="http://tryruby.org" title="Try Ruby">Try Ruby</a> &ndash; Learn the basics, in your browser!</li>
<li><a href="http://ruby.learncodethehardway.org/" title="Learn Ruby The Hard Way">Learn Ruby The Hard Way</a> &ndash; Zed Shaw is (maybe) a jerk, but his books are good. This is a good (free) place to start.</li>
<li><a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> &ndash; Once you&rsquo;ve got a little under your belt, <a href="http://rubykoans.com/" title="Ruby Koans">Ruby Koans</a> is your next step to make sure you&rsquo;ve got the basics under your belt.</li>
</ul>


<h3>Really? <em>Still</em> Interested?</h3>

<p>That&rsquo;s fuckin&#8217; awesome. I&rsquo;m really happy you&rsquo;re still into this.</p>

<p>Now I get to knock you on your ass, grasshopper. Hopefully you&rsquo;ve read my blog (or know me) enough to know how I feel about learning to build &ldquo;apps&rdquo; without a firm grounding in the fundamentals of computer science. So we&rsquo;re going address this right the hell now.</p>

<p>See, you didn&rsquo;t major in Computer Science. That&rsquo;s okay, niether did I. But that doesn&rsquo;t mean you get a pass on it. We&rsquo;re going to look at some resources to get you the grounding you need to really get up to snuff on the shit you&rsquo;d better know if you want to be a Real Programmer™.</p>

<p>Let&rsquo;s get started.</p>

<p>The first thing you need is math. I&rsquo;m not talking your standard college Calculus or Algebra stuff, but the Real Math you need as a real programmer. So here&rsquo;s the deal: read <a href="http://en.wikipedia.org/wiki/Concrete_Mathematics" title="Concrete Mathematics">Concrete Mathematics</a>.</p>

<p><img class="[float-right]" src="http://ecx.images-amazon.com/images/I/518GBVWEBYL.jpg" title="Concrete Mathematics" ></p>

<p>This book, let me tell you, it was co-written by <a href="http://en.wikipedia.org/wiki/Donald_Knuth" title="Donald Knuth">Knuth</a>, because, let me tell you, Knuth weighed all the extant math texts in the balance and found them lacking. And if Knuth finds you lacking&hellip; jsut go home. This book tricks you into learning both algorithmic estimation and recursion in chapter one and never looks back. It is indispensible.</p>

<p>Next, you need to grok a few things: computability theory, Turing machines, syntax and semantics, etc. Once upon a time, I would have shoved a copy of <a href="http://mitpress.mit.edu/sicp/" title="SICP">The Structure and Interpretation of Computer Programs</a> in your face so fast, it would have made your head spin.</p>

<p><img class="[float-right]" src="http://upload.wikimedia.org/wikipedia/en/9/9d/SICP_cover.jpg" title="SICP" ></p>

<p>But, young padawan, I&rsquo;ve decided to ease you into your Jedi training, and we&rsquo;ve settled on Ruby as your focus of practice before you graduate to the full Lisp light saber, so let&rsquo;s consider an alternative.</p>

<p><a href="http://oreilly.com/" title="O'Reilly">O&#8217;reilly</a> recently published an excellent intro to CS book called <a href="http://shop.oreilly.com/product/0636920025481.do" title="Understanding Computation">Understanding Computation</a>, which covers about half the material in SICP, but in Ruby, and probably more acessibly than SICP (aka The Wizard Book), especially since you (by now) have a passing familiarity with Ruby.</p>

<p>So let&rsquo;s see&hellip; we&rsquo;ve got you started on Ruby, given you some good resources on the basics of CS, and you&rsquo;re on your way&hellip; what next?</p>

<h3>Resources</h3>

<p>Now we get into the areas where you&rsquo;re exploring on your own, and just coming back to me for help and guidance. Congratualtions! You&rsquo;re nearly ready to graduate to a full Jedi.</p>

<p>Let&rsquo;s see what&rsquo;s available.</p>

<ul>
<li><a href="http://codeschool.com/" title="Code School">Code School</a> is really great, and completely worth the US$25 a month they charge for their entire course catalog.</li>
<li><a href="http://coursera.com/" title="Coursera">Coursera</a> has great CS classes, not typically Ruby based, but you&rsquo;ll learn some core concepts that will be extensively useful.</li>
<li><a href="http://codecademy.com/" title="Codecademy">Codecademy</a> has free courses, of varying quality.</li>
<li><a href="http://betamore.com/academy/" title="Betamore Academy">Betamore Academy</a> has 10-week courses here in Baltimore that will bootstrap you pretty well as a developer, as well as providing networking opportunities to find internships and jobs.</li>
</ul>


<p>I&rsquo;ll try to update this in the future. And you know you can always get in touch and I&rsquo;m more than happy to give you a hand. There&rsquo;s nothing more exciting to me than smart folks falling in love with coding. Happy trails, bro, and remember to keep it fun.</p>

<p><em>Update: I&rsquo;ve posted a follow-up at <a href="http://decomplecting.org/blog/2013/11/12/just-get-hacking/">&ldquo;Just Get Hacking&rdquo;</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return of the Job Destroyer]]></title>
    <link href="http://decomplecting.org/blog/2013/09/02/return-of-the-job-destroyer/"/>
    <updated>2013-09-02T21:57:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/09/02/return-of-the-job-destroyer</id>
    <content type="html"><![CDATA[<h3><em>Or, &ldquo;Human Contact as a Premium Service&rdquo;</em></h3>

<p>Last year, I wrote a mildly controversial bit of satire called <a href="http://decomplecting.org/blog/2013/03/11/confessions-of-a-job-destroyer/">&ldquo;Confessions of a Job Destroyer&rdquo;</a>, in which I &ldquo;lamented&rdquo; my role in the automation of tasks formerly done by humans.</p>

<p>Over the weekend, I was reading <a href="http://news.ycombinator.com">Hacker News</a> a bit more than usual, and there were a number of fascinating posts and comment threads à propos to the topic, so I feel it&rsquo;s time I revisited it with the snark dialed down below 11.</p>

<p>First, there was <a href="http://www.marketplace.org/topics/wealth-poverty/what-did-tech-ceo-say-worker-he-wanted-automate">&ldquo;What did the tech CEO say to the worker he wanted to automate?&rdquo;</a>, a follow-up on <a href="http://uservoice.com">UserVoice</a> CEO Richard White&rsquo;s comments re the BART strike last year:</p>

<blockquote><p>My solution would be to pay whatever the hell they want, get them back to work, and then go figure out how to automate all their jobs.</p><footer><strong>Richard White</strong> <cite><a href='http://www.marketplace.org/topics/wealth-poverty/what-did-tech-ceo-say-worker-he-wanted-automate'>www.marketplace.org/topics/&hellip;</a></cite></footer></blockquote>


<p>In TFA, White accompanies a journalist to a BART station and has a conversation with a station attendant, about her feelings toward the proposition that her job be automated. There&rsquo;s some disagreement on how much &ldquo;the human factor&rdquo; matters in the role, but her response is instructive for the purposes of this article.</p>

<!-- more -->




<blockquote><p>But if her job was automated, I asked.  What would she do?  She thought about it for a moment.</p><p>“I would do my hobby,” Landry said. “Hair and make-up. And buy and sell houses.”</p><p>Then White was the one smiling.  “See?” he said.  “Wouldn&#8217;t that be perfect if she could actually pursue her hobby?”</p><p>And that does sound great.  But it&#8217;s not what seems to be happening in the New Economy, at least not yet.</p><footer><strong>&#8220;What did the tech CEO say to the worker he wanted to automate?&#8221;</strong> <cite><a href='http://www.marketplace.org/topics/wealth-poverty/what-did-tech-ceo-say-worker-he-wanted-automate'>www.marketplace.org/topics/&hellip;</a></cite></footer></blockquote>


<p>I&rsquo;ll return to this, but I wanted to point to the <a href="https://news.ycombinator.com/item?id=6312100">HN comments thread</a>, which is a particularly (unusually?) good read.</p>

<p>White&rsquo;s comments provoked two responses on the labor front earlier this year, which I also want to link while I&rsquo;m on the subject. A pro-labor, anti-tech-entrepreneur article from <a href="http://salon.com">Salon.com</a> entitled <a href="http://www.salon.com/2013/07/08/silicon_valley_is_stoking_the_wrong_kind_of_revolution/">&ldquo;Silicon Valley is stoking the wrong kind of revolution&rdquo;</a>, and an anti-labor, pro-tech-entrepreneur article from <a href="http://techcrunch.com">TechCrunch</a> called <a href="http://techcrunch.com/2013/07/29/why-labor-unions-and-silicon-valley-arent-friends-in-2-charts/">&ldquo;Why Labor Unions And Silicon Valley Aren’t Friends, In 2 Charts&rdquo;</a>.</p>

<p>While both are interesting and make valid points, both also suffer from the <a href="http://en.wikipedia.org/wiki/False_dilemma">false dilemma fallacy</a>. Labor and technology aren&rsquo;t enemies; labor and capital are enemies, but only if you have a conception of human rights and human dignity. And technology actually provides a solution, if we can overcome certain of our baser tendencies.</p>

<p>The second thread on HN that prompted this post was a <a href="http://dangerousminds.net/comments/america_is_awash_in_money_yet_poverty_grows_we_need_a_basic_income">new call for a Basic Income Guarantee</a> (HN comment thread <a href="https://news.ycombinator.com/item?id=6309882">here</a>).</p>

<h2>Goodbye, Middle Class</h2>

<p>I&rsquo;d already been mulling a return to this topic for a while since <a href="http://www.technologyreview.com/featuredstory/515926/how-technology-is-destroying-jobs/">&ldquo;How Technology is Destroying Jobs&rdquo;</a> appeared in the <a href="http://www.technologyreview.com">MIT Technology Review</a>, and David Graeber&rsquo;s article <a href="http://www.strikemag.org/bullshit-jobs/">&ldquo;On The Phenomenon of Bullshit Jobs&rdquo;</a> appeared on <a href="http://www.strikemag.org">Strike!</a>.</p>

<p>There&rsquo;s a growing consensus among economists, anthropologists, and technologists that:</p>

<ol>
<li>We&rsquo;re seeing economic displacement unknown since the Industrial Revolution</li>
<li>Actually, it&rsquo;s different this time and we&rsquo;re not sure why</li>
<li>Moderately-skilled, white-collar jobs (the bread and butter of the middle class) are only going to be hit harder and harder</li>
<li>The jobs available are diverging into top-paying &ldquo;creative&rdquo; sectors, and low-wage &ldquo;bullshit jobs&rdquo;</li>
<li>What the fuck do we do about it?</li>
</ol>


<p>I think that&rsquo;s where a lot of this <a href="http://code.org">&ldquo;OMG EVERYONE LEARN TO CODE&rdquo;</a> impetus stems from, and while I am a vocal proponent of the absolute importance of <a href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/">computational literacy</a>, I&rsquo;m not sure this is a solution for anyone except the companies who have forgotten the bad old days of &ldquo;commodity programmers.&rdquo;</p>

<h2>Automata(tion) Theory</h2>

<p>If you have any kind of CS background, you can&rsquo;t look at the word &ldquo;automation&rdquo; without seeing the word &ldquo;automata.&rdquo; This is something I&rsquo;ve been pondering of late.</p>

<blockquote><p>The franchise and the virus work on the same principle, what thrives in one place will thrive in another. You just have to find a sufficiently virulent business plan, condense it into a three-ring binder ― its DNA ― Xerox it, and embed it in the fertile line of a well-traveled highway, preferably one with a left turn lane. Then the growth will expand until it runs up against its property lines.</p><footer><strong>Neal Stephenson, Snow Crash</strong> <cite><a href='http://www.goodreads.com/work/quotes/493634-snow-crash'>www.goodreads.com/work/quotes/&hellip;</a></cite></footer></blockquote>


<p>At the beginning of Neal Stephenson&rsquo;s cyberpunk classic <em>Snow Crash</em> there&rsquo;s a great description of franchises &ndash; every policy and procedure down to the last detail is laid out in a series of three-ring binders which must be adhered to precisely, without deviation. When an edge case crops up (been a while since I read it, I think there was a bomb or fire), the manager, instead of responding, starts flipping through binders to figure out the response protocol.</p>

<p>Long ago and in another life (high school), I worked at Starbucks. Back then, we had to walk uphill both ways in three feet of snow to the espresso machine. Okay, not really, but we were using 4-group, hand-tamped machines, and you had to be able to calibrate the grind, adjust your tamp for conditions down to the ambient humidity, and use a combination of sound, feel, and an analog thermometer to steam and foam the milk properly. A perfect cappuccino was something you could feel proud of. And now&hellip; button pushing. I am in no way trying to <a href="http://en.wikipedia.org/wiki/The_Work_of_Art_in_the_Age_of_Mechanical_Reproduction">reclaim the aura</a>, but there is a qualitative difference in the job of a barista now versus then (I picked on Starbucks in the previous post &ndash; nothing personal, but it&rsquo;s illustrative). Actually, this is a &ldquo;same old shit&rdquo; phenomenon: consider Marx&rsquo;s contrast of the artisan and the industrial proletariat in <a href="http://www.marxists.org/archive/marx/works/1867-c1/ch32.htm">Chapter 32 of <em>Capital</em></a>.</p>

<p>But even in those days, a Starbucks store was the implementation of a set of instructions contained in countless three-ring binders. Everything from staffing to customer handoff to drink preparation was in those binders. If I&rsquo;d known then what I know now (oh, how many times will I utter that phrase?), I could have (conceivably) described the workings of an entire store as a <a href="http://en.wikipedia.org/wiki/State_diagram">state diagram</a>.</p>

<p>Seriously: if you have humans enacting a rote set of instructions, what you want is not a person, what you want is a <em>compiler.</em></p>

<p><span class='pullquote-right' data-pullquote='If there can be described a finite-state machine which encompasses all of the functions of a given job, that job is beneath human dignity.'>
And herein lies my central argument: If there can be described a finite-state machine which encompasses all of the functions of a given job, that job is beneath human dignity. And, <em>a fortiori,</em> if a deterministic finite automaton can in principle encompass the full range of the job, that job should be automated post haste.</p>

<p><img src="http://decomplecting.org/images/post-img/state_diagram.png"></p>

<p>So, as robots and AI and software in general become more sophisticated, what are some of the jobs we can expect to be &ldquo;softsourced&rdquo; or otherwise automated?</p>

<ul>
<li>Fast-food and other low-wage service jobs</li>
<li>Bookkeeping, customer service, health care billing and administration</li>
<li>(Please, God) The MVA (or DMV, depending on your state)</li>
<li>Bartenders and wait staff</li>
<li>Tier I tech support (and anyone else who follows a &ldquo;script&rdquo; and is not an <a href="http://www.sagaftra.org/">SAG</a> member)</li>
<li>Retail clerks, cashiers, etc.</li>
</ul>


<p>This list is both partial and speculative, but I think it covers the bases conceptually.
</span></p>

<h2>Human Contact as a Premium Service</h2>

<p>I&rsquo;m almost giddy about the prospects of going shopping or grabbing a quick lunch without having to interact with humans. Like many hackers, I fall somewhere on the high-functioning end of the <a href="http://en.wikipedia.org/wiki/Autism_spectrum">autism spectrum</a>, so I try not to generalize my own preferences in this regard. But I think many people would like to be able to go out without being hassled by salespeople, oozed on with the fake charm of an overly unctuous waiter, or encounter a surly, inefficient gatekeeper to the renewal of a driver&rsquo;s licence. I do as much of my shopping online as possible in order to avoid these scenarios, but sometimes it&rsquo;s nice to get out of the house, and <em>not</em> for the chance to encounter strange humans who are just going to spoil the experience anyhow.</p>

<p>Then sometimes, it&rsquo;s different. I tend not to put a lot of time and effort into clothing. I was once really into fashion, to be honest, but I just don&rsquo;t see the point anymore. My brain and fingers have the economic value; I&rsquo;m most comfortable in jeans and a nerdy T-shirt. But when I&rsquo;m looking for something special or fancy&hellip; you can&rsquo;t beat <a href="http://www.saksfifthavenue.com/">Saks Fifth Avenue</a>. Shopping at Saks warrants a trip to NYC in and of itself. Every single time, the salesman (not to be sexist, but in the Men&rsquo;s Store, it&rsquo;s usually a salesman) typically will direct me in the first five minutes to something I wouldn&rsquo;t have even glanced at myself, but that looks better on me than skin on Lady Godiva, and feels like butter. And if I&rsquo;m picky, I&rsquo;ll have my hand held and my every question and concern adressed for the duration of the expedition. I think they gave me an 18 year old scotch while the tailor was chalking adjustments on one trip.</p>

<p>And yes, it&rsquo;s expensive. But these were skilled craftsmen &ndash; and I&rsquo;m not speaking only of the tailor, who was, yes, and artist) &ndash; but also of the salesmen, who knew their stock and knew my size, shape, and style at 50 paces. This is a premium service, and something a retail droid will not approximate until they become self-aware and overthrow us.</p>

<p>Likewise, consider Burger King versus a small bistro: at the former, do I give a fuck whether a teenager or an automaton enters my order?</p>

<p>Actually, I probably do: a robot is more likely to be accurate, ensuring I have it &ldquo;my way, right away, at Burger King now.&rdquo;</p>

<p>On the other hand, do I want an <a href="http://en.wikipedia.org/wiki/Expert_system">expert system</a> suggesting a wine pairing for my pan-fried sweetbreads with haricots verts in a citrus beurre blanc? Not that I don&rsquo;t like automated wine-pairing apps, but I want a damn sommelier to advise me that in this instance, the 2006 Riesling is a better match than the 2003 Sauvignon Blanc.</p>

<p>It&rsquo;s a premium. It&rsquo;s why we go to places like Saks or a pricey bistro. And it&rsquo;s why I think there will always be places for human interaction in retail, restaurants, etc., even if we eliminate humans at the commodity level.</p>

<h2>Marx, Unions, and the Labor Situation</h2>

<p>Personal statement here: I &lt;3 labor unions, I believe in them, I want to ragequit this country everytime a douchecanoe like Scott Walker gets elected. That being said&hellip; Marx saw that trade unions are not enough, the <a href="http://www.iww.org/">IWW</a> is awesome but, let&rsquo;s be honest, still mostly a historical society for anarcho-syndicalists, and, one must admit, unions were a specific historical response to the commodification of labor.</p>

<p>We&rsquo;re now at a point that commodity labor is being replaced by commodity software&hellip; and that <em>has the potential to be</em> a good thing. The idea that human activity can be commodified should be offensive to human dignity. Sadly, in this country in particular, we&rsquo;ve been beholden to the <a href="http://en.wikipedia.org/wiki/Protestant_work_ethic">Protestant work-ethic</a> (viz. the above-cited Graeber article on &ldquo;bullshit jobs&rdquo;) and refused to acknowledge that dignity should not be about work (better expressed in Joules) but <em>creativity.</em></p>

<p>So, the increasing polarisation of work? Creatives at the top, automatons at the bottom? There have been commendable attempts by fast-food workers to unionize, <a href="http://www.slate.com/blogs/xx_factor/2013/09/02/fast_food_strikes_low_wage_female_workers_are_driving_this_labor_movement.html">striking for higher wages</a>, but I expect this will only drive the incentive to automate those jobs out of existence, as the technology catches up with the economic need (of the bosses, the only economic need that matters in the short term). On the other hand, there are clarion calls for technologists to <a href="http://michaelochurch.wordpress.com/2012/11/18/programmers-dont-need-a-union-we-need-a-profession/">self-recognize as a profession</a>, since every attempt to commodotize our work has been an abject (and dreadfully expensive) failure.</p>

<p>Where does that leave us?</p>

<p>We need professions, with codes of ethics, basic standards of professional development, etc., among the new economy professions. We need unions for all commodity labor, agitating for higher wages while those jobs exist, and continuing the fight for displaced workers when commodity jobs are automated. But what we need most of all&hellip;</p>

<h2>The Basic Income Guarantee (BIG)</h2>

<p>I was astonished to learn recently that Milton Friedman, of all people, was on the presidential commission that recommended a BIG in 1969. If someone that far to the right could advocate something so seemingly &ldquo;socialist&rdquo;&hellip; wow. Then again, the right has swung so much further to the right since then that the GOP mainstream is somewhere between Pat Robertson and Adolf Hitler, making Friedman look like a damn hippie.</p>

<p>But the BIG solves many problems posed both by right-libertarian laissez-faire capitalism, and by the traditional welfare state. It doesn&rsquo;t penalize working (unlike TANF, SSDI, and SSI in the U.S.); it doesn&rsquo;t require endless bureaucracy just to apply (let&rsquo;s get rid of those social services jobs too, while we&rsquo;re replacing the MVA with robots), and it&rsquo;s egalitarian.</p>

<p>If you&rsquo;ve read this far, I&rsquo;m sure you&rsquo;re smart enough to Google &lsquo;basic income guarantee&rsquo; (but just in case, <a href="http://lmgtfy.com/?q=basic+income+guarantee">let me Google that for you</a>), so I&rsquo;m not going to endlessly cite the studies demonstrating the economic benefits.</p>

<h2>MOOCs, Code.org, O RLY?</h2>

<p>I love the idea that we (as a society) are lowering the barrier to entry of professions like software development, design, etc. With free online courses (and even cheap (but awesome) paid classes like <a href="http://codeschool.com">CodeSchool</a>), it&rsquo;s easier than ever to level up in lucrative skill sets. If you have the time.</p>

<blockquote><p>It is clear then that there are branches of learning and education which we must study merely with a view to leisure spent in intellectual activity, and these are to be valued for their own sake; whereas those kinds of knowledge which are useful in business are to be deemed necessary, and exist for the sake of other things.</p><footer><strong>Aristotle, Politics</strong> <cite><a href='http://classics.mit.edu/Aristotle/politics.8.eight.html'>classics.mit.edu/Aristotle/&hellip;</a></cite></footer></blockquote>


<p>Aristotle viewed leisure as a necessary precondition for the pursuit of philosophy, an intellectual pursuit which should be considered its own <em>telos</em> (If you&rsquo;re new to this blog, full confession: I was a Philosophy major, and there my heart still lies).</p>

<p>But without artisans or guilds, or even (harsh though it was) indentured servitude, where lies the time to learn a new profession? If keeping body and soul together occupy 40, 60, 80 hours a week, where lies the time to develop the mental faculties to grok computer science, to learn Ruby or Clojure, to practice this arcane art?</p>

<p>Let me put it to you this way: I&rsquo;m the CTO of a very cool and very fun edtech company. I also have a nine month old daughter at home. Both are incredibly enjoyable and fulfilling, but&hellip; my time for open source hacking? Pretty limited at the moment.</p>

<p>And I sit at a desk coding most of the day. I couldn&rsquo;t imagine flipping burgers for eight hours, going home to have a sandwich, going to a second job, coming home again, and trying to do homework.</p>

<p>A basic income would provide the padding to re-skill a de-skilled workforce, return dignity to actual work, and let us not behave like savages, because the root cause of most of our social ills is poverty.</p>

<p>Our productivity as a society is the highest in history. Let&rsquo;s acknowledge that we all contribute in one way or another, and that we should all have the opportunity (at least) to reach for the stars.</p>

<p>Or, if you&rsquo;re convinced that this is a meritocracy and that&rsquo;s why you&rsquo;re at the top&hellip; let me introduce a concept that we never should have forgotten&hellip; and one that you neglect at your own peril: <a href="http://en.wikipedia.org/wiki/Noblesse_oblige"><em>noblesse oblige</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of "Aaron's Law"]]></title>
    <link href="http://decomplecting.org/blog/2013/06/21/the-importance-of-aarons-law/"/>
    <updated>2013-06-21T11:42:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/06/21/the-importance-of-aarons-law</id>
    <content type="html"><![CDATA[<p>Yesterday, Rep. Zoe Lofgren and Rep. Ron Wyden introduced a bill, known as &ldquo;Aaron&rsquo;s Law&rdquo;, which amends the <a href="http://en.wikipedia.org/wiki/Computer_Fraud_and_Abuse_Act">Computer Fraud and Abuse Act (CFAA)</a>, a 1986 bil which set most of the &ldquo;cybercrime&rdquo; statutes on the books today. This law, affectionately known as <a href="http://www.gpo.gov/fdsys/pkg/USCODE-2010-title18/html/USCODE-2010-title18-partI-chap47-sec1030.htm">U.S. Code Title 18, Part I, Chapter 47, §1030</a>, has been added to many times over the years (via the PATRIOT Act, and various bills related to issues of identity theft, etc.), but the substantial core of the bill has remained the same since 1986: vague, ominous, overly broad, and a rampant playground for prosecutorial misconduct.</p>

<p>A quick recap of the origins of Aaron&rsquo;s Law, just in case there are readers outside my usual demographic of nerds and hackers: Aaron Swartz was a brilliant programmer and activist who co-authored the RSS specification as a teenager, went on to co-found <a href="http://reddit.com">Reddit</a> and <a href="http://demandprogress.org">Demand Progress</a>, and so much more. Chagrined by the lack of public access to (especially taxpayer-funded) research, he went on to use MIT&rsquo;s computer network to (illegally) download millions of academic papers from JSTOR. MIT and JSTOR both declined to press charges, but federal prosecutors Carmen Ortiz and Stephen Haymann smelled blood in the water and attacked like frenzied piranha-sharks. okay, those don&rsquo;t exist, but I don&rsquo;t think there&rsquo;s a single creature vicious enough to describe this dastardly duo. Faced with 35 years in federal prison, Aaron, sadly, took his own life.</p>

<p>I&rsquo;m not here to rehash the whole case or go over what should have happened differently. The hacker community mourns the loss of Aaron Swartz, each of us in our own way. But I do want to address the technical, economic, and even pedagogical consequences of the CFAA in its current state, and why its amendment is so vital.</p>

<!--more-->


<h3>A history of abuse</h3>

<p>Aaron Swartz was not the first victim of the CFAA, but may be its first public fatality. In <em>The Hacker Crackdown,</em> Bruce Sterling desccribes the rampant excesses of &ldquo;Operation Sundevil,&rdquo; an all-out raid on &ldquo;hackers&rdquo; that occurred in the late 1980&rsquo;s. There&rsquo;s a good <a href="http://gawker.com/5975889/the-death-of-aaron-swartz-and-the-new-hacker-crackdown">piece on Gawker</a> that describes that incident and how it relates to Aaron&rsquo;s case.</p>

<p>A funny thing happens when someone begins to deeply <a href="http://www.catb.org/jargon/html/G/grok.html">grok</a> computer systems, especially at the level of code. It opens a new world of possibilities, and ignites an insatiable curiosity. A curiosity which is often &ldquo;criminal&rdquo; when exploration takes one beyond one&rsquo;s own sandbox.</p>

<p>I got my first modem at the age of ten or eleven, and quickly left the BBS world when I got my first real (UNIX shell) internet account. I won&rsquo;t go into details (not sure what the statute of limitations is!), but I&rsquo;m <em>certain</em> some of what I got up to ran afoul of the CFAA, to put it mildly. I was a burgeoning hacker, not a cracker; I was never malicious, tried to follow the &ldquo;Boy Scout rule&rdquo; (always leave the campground better than you found it), and even left anonymous tips for the administrators of systems that I, uh, accessed, telling them how I got in and pointing them to a patch if I knew of one.</p>

<p>I&rsquo;d like to think that, in the process of learning volumes about programming, systems, networks, etc., I actually helped to improve security.</p>

<h3>The next generation of hackers</h3>

<p>As I mentioned in my <a href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/">last post</a>, I&rsquo;m really interested in the push to teach kids real programming skills. But what happens when we&rsquo;re giving kids the tools to send themselves to federal prison because of some outdated, vague laws that prosecutors love to abuse in order to &lsquo;make examples&rsquo; of individuals whose only real crime is curiosity and a desire for open access to information?</p>

<p>When we open the world of programming to kids, we&rsquo;re really creating the next generation of hackers. Not in the media-hyped, perjorative sense, but in the standard meaning, established by <a href="http://tools.ietf.org/html/rfc1392">RFC1392</a>: &ldquo;A person who delights in having an intimate understanding of the internal workings of a system, computers and computer networks in particular.&rdquo;</p>

<h3>A legislative pull request</h3>

<p>In a way, the body of laws forms the source code for our democracy; sadly, the compilers (lawyers and judges) are buggy as all hell and don&rsquo;t raise warnings until it&rsquo;s too late.</p>

<p>In Aaron Swartz&rsquo;s case, we had a prosecutorial buffer overrun that caused the target process (Aaron) to segfault. It&rsquo;s time to patch this piece of source code with the amendments contained in Aaron&rsquo;s Law. It&rsquo;s just a patch, and I&rsquo;d say we need better code review (in this case, public code review actually occured via Reddit, setting an interesting precedent) in general, until we have perfect compilers &mdash; and I don&rsquo;t see perfect lawyers or judges arriving any time soon.</p>

<p>Open source works; sunlight is the best disinfectant; transparency is desirable. When our elected representatives legislate out of fear or confusion (CFAA, PATRIOT, etc.), we get bad laws that imprison our best and brightest, or worse, take them from us completely.</p>

<p>Please go to the <a href="http://act.demandprogress.org/sign/aarons_law_intro/">Demand Progress site for Aaron&rsquo;s Law</a> to become a citizen co-sponsor of the bill &ndash; it might be a measure too late for Aaron, but it&rsquo;s necessary for the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're Not Ready To Teach Kids To Code]]></title>
    <link href="http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code/"/>
    <updated>2013-06-02T23:22:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/06/02/were-not-ready-to-teach-kids-to-code</id>
    <content type="html"><![CDATA[<h2>Think Kids Should Learn To Code? Teach The Teachers First</h2>

<p>I&rsquo;m really excited about the heavy emphasis I&rsquo;m seeing on <a href="http://gettingsmart.com/2013/05/teaching-kids-to-code-an-economic-social-justice-issue/">teaching kids to code</a>. Although I agree with just about everything <a href="http://codinghorror.com">Jeff Atwood</a> wrote in his controversial post, <a href="http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html">&ldquo;Please Don&rsquo;t Learn to Code&rdquo;</a>, I also believe that in an age in which <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">software is eating the world</a>, understanding code is a basic literacy issue. This goes beyond the concept of digital literacy: as applied, this boils down to knowing how to use Google. What we&rsquo;re seeing in the movement to bring coding into the core curriculum is a new emphasis on what I&rsquo;d like to call <em>computational literacy.</em></p>

<h3>Computational Literacy</h3>

<p>Computational literacy is a concept that I wish had been &ldquo;a thing&rdquo; when I was in school. I&rsquo;ll start with an anecdote, and then delve into the gritty challenges that the &ldquo;teaching kids to code&rdquo; movement is failing to recognize.</p>

<p>When I was a kid, I loved math&hellip; or, at least, I loved figuring out the algorithms behind the calculation. I learned BASIC when I was 5 or 6, so when got to middle school, and discovered that the Texas Instruments graphing calculators we were required to buy for class spoke just about the same dialect of BASIC I had learned as a kid (I first learned to code on a <a href="http://en.wikipedia.org/wiki/Texas_Instruments_TI-99/4A">TI 99/4A</a>), I was so excited. Once I could derive the algorithm from a new concept we were being taught, I could express it in code and skip the boring parts. I&rsquo;ve never done well when bored.</p>

<p>Alas, my youthful optimism was to be dashed on the rocks of pedagogical ignorance and stupidity. First, I was told that I wouldn&rsquo;t receive credit for my <strong>correct</strong> answers because I didn&rsquo;t &ldquo;show my work&rdquo;.</p>

<p>On the next exam, I wrote out the source listing of each program I had used with a reference to the problems to which it had been applied (I&rsquo;m pretty sure the number of GOTOs I used in those days would have made Dijkstra cry).</p>

<p>That&rsquo;s when they usually called my mom in for a conference.</p>

<!-- more -->


<h3>WTF Technophobes</h3>

<p>I have to give my mother credit here. We went into those meetings facing an irate math teacher discussing how I was being insolent and writing a program instead of learning the math concepts I was supposed to learn in the class. My mother&rsquo;s response was a deadpan &ldquo;If he didn&rsquo;t understand the concepts, how could he write the program?&rdquo;</p>

<p>Did I mention my mom is awesome?</p>

<p>There was never a real resolution to this. I stopped taking math when I&rsquo;d gotten enough credits to graduate (thanks, all my math teachers, for teaching me to hate a subject I once loved because it was taught by ignorant technophobes). I tried again in college, but was greeted by the same attitude, so combined with that and a required CS 101 class on Visual Basic (as if I would even run Windows, much less write VB), I majored in Philosophy. Okay, that&rsquo;s enough spleen for this post (and I have no regrets majoring in Philosophy; you&rsquo;ll learn more critical thinking skills in a good philosophy program than in any Applied Math or CS program).</p>

<h3>Teaching Kids to Code? Why?</h3>

<p>We need a paradigm shift in education before we even <em>dream</em> of making coding part of the curriculum. Until we challenge our basic attitudes and assumptions, teaching kids to code in school will be an abject failure, for a number of reasons.</p>

<p>The first is that abstract learning without application is meaningless. I&rsquo;m not the most emotive viewer, but Conrad Wolfram did a TED talk a while back that had me jumping out of my chair, clapping, and shouting &ldquo;#{expletives.sample} yeah!&rdquo; repeatedly at my computer. Here&rsquo;s the video (If you haven&rsquo;t watched &ldquo;Teaching kids real math with computers&rdquo;, do so NOW):</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/60OVlfAUPJg" frameborder="0" allowfullscreen></iframe>


<p>If our math curricula (the subject best suited to a programming solution!) are based around chidren doing rote, repetitive calculation, what&rsquo;s the point in teaching them to code? I had hoped that maybe the attitude toward programming in schools had changed in the nearly 15 years since I graduated high school, but a quick Google search showed that not much has changed, e.g. <a href="http://www.k12.wa.us/mathematics/CalculatorPolicy.aspx">Washington&rsquo;s state K-12 math calculator policy</a>.</p>

<p>No programs. No code, dogs, or Irish need apply.</p>

<p>How can we even <em>think</em> of teaching kids to code while code is a &ldquo;cheat,&rdquo; &ldquo;not showing your work&rdquo; (where&rsquo;s the harm in automating work that <em>should</em> be considered beneath human dignity?), et cetera.</p>

<p>Most of the proposals I&rsquo;ve seen around the &ldquo;teaching kids to code&rdquo; thing center on getting practicing software engineeers to volunteer their time with kids to teach them basic (and more advanced, if they&rsquo;re into it) programming skills.</p>

<p>We&rsquo;re totally into this idea! Particularly in the Ruby community, there&rsquo;s <a href="http://www.kidsruby.com/">KidsRuby</a> and <a href="http://hackety.com/">Hackety Hack!</a>, awesome projects centered around teaching kids basic programming skills in a fun and easy-to-learn dynamic language.</p>

<p>But until teachers understand the tech enough to embrace (rather than fear) it, what&rsquo;s the point?</p>

<p>If I wasn&rsquo;t already at least a hobbyist hacker, and I was taking my first programming course, and arrived in math class only to be told I couldn&rsquo;t apply my exciting and newly-learned skills to the problem at hand, because it was like cheating, how would I react? I&rsquo;d most likely lose interest in a subject I couldn&rsquo;t apply to anything.</p>

<p>Okay, well, <em>I</em> would likely lose interest in my math class (or at least my math teacher) because code is <em>so frakking cool.</em> But I&rsquo;m trying to imagine myself as the student who isn&rsquo;t a huge nerd.</p>

<h3>Quis docet ipsos doctores?</h3>

<p>It might sound like I&rsquo;ve been a bit harsh toward the teachers here. Nothing could be further from my intent. As I&rsquo;ve gained time and distance, I&rsquo;ve realized that it&rsquo;s merely ignorance that built a wall between us; not stupidity, and certainly not malice. And it was an ignorance for which they were not responsible; it was the fault of the system that trained them, and the system that was later responsible for their professional development.</p>

<p>No one ever taught my teachers about software; what went into building it, using it, etc.</p>

<p>If (most of) the teachers are computational illiterates, how can we expect the kids to become computationally literate in any meaningful way?</p>

<p>Technology has penetrated pedagogy to a significant degree but hasn&rsquo;t really changed the practice in a fundamental way; if your use of technology isn&rsquo;t transformative, it&rsquo;s a misuse, possibly an abuse.</p>

<p>Where technology hasn&rsquo;t penetrated in a meaningful way is in professional development. Teachers are still &ldquo;improving&rdquo; their skills in more or less the same way they were decades ago. This has to change. If you&rsquo;re teaching in a STEM-related area and you cannot or will not understand variable assignment, iteration, recursion, and other basic concepts &mdash; the very basics of coding &mdash; you should find a new career. I&rsquo;m not saying you need to delve into pointers, concurrency, etc. Just the basics. If I were going into high school all over again (and this is what I intend for my daughter (if she&rsquo;s into it), so Math Teachers Beware!), I would go in with a mastery of <a href="http://mitpress.mit.edu/sicp/">SICP</a>, and a willingness to get myself expelled for refusing to do rote calculation when I could solve the problem with a 3-line recursive function in Scheme.</p>

<h3>What&rsquo;s The Answer?</h3>

<p>Good question. I think the reason we don&rsquo;t have a good answer yet is that we&rsquo;ve been asking the wrong question. Getting developers to mentor students is a fantastic idea; if my time wasn&rsquo;t 120% consumed between a startup and a six month old, I&rsquo;d be spending my free time (that&rsquo;s a thing?) volunteering to teach kids to program. But we run into a roadblock when the general population of educators need a class just to use Twitter. Which is why I ask, &ldquo;Quis docet ipsos doctores?&rdquo; &mdash; &ldquo;Who teaches the teachers themselves?&rdquo;</p>

<p>This is also why I&rsquo;m so excited about working at <a href="http://anestuary.com">An Estuary</a>. The opportunity to bring technological solutions not just to education, but to professional development within education, is the opportunity to bridge the gap between what students need to learn and what teachers are capable of allowing them to learn in a meaningful way. Of bringing education into the 21st century (after dragging it kicking and screaming through the 20th, because it&rsquo;s currently stuck in the 19th, albeit with some toys from the future).</p>

<p>I never want another child to look at her teacher and think (as I did) &ldquo;are you from the past?&rdquo; I never want another nerd to hate math because his teacher didn&rsquo;t understand that <em>the code is the work.</em> I never want another hacker to give up on education because her teachers, professors, peers, etc. appeared to be stupid or malicious when they were merely ignorant.</p>

<p>I want to change the system. I want to make &ldquo;it gets better&rdquo; real for hackers and nerds.</p>

<p>I want to make the subjugation of billions of children to the subhuman task of rote calculation a thing of the past.</p>

<p>How far am I willing to go?</p>

<p>Doctores docebo, si necesse est.</p>

<p>We must teach the teachers, or teaching the children is so much tilting at windmills. There are no easy solutions, but I&rsquo;m proud to be part of a company that&rsquo;s addressing the hard problems.</p>

<h3>Postscript</h3>

<p>This post has been long in the making; shortly after I completed the first draft, <a href="https://www.edsurge.com">EdSurge</a> posted an opinion piece, <a href="https://www.edsurge.com/n/2013-05-28-opinion-learning-to-code-isn-t-enough">&ldquo;Learning To Code Isn&rsquo;t Enough&rdquo;</a>, which looked at this issue a little differently. It cited a wonderful article on <a href="http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/Wing06.pdf">&ldquo;Computational Thinking&rdquo;</a> (essentially what I describe as &ldquo;computational literacy&rdquo;) by Jeanette Wing, arguing for the equal status of CS fundamentals with reading, writing, and arithmetic in curriculum standards.</p>

<p>The article also highlights a problem with the &ldquo;teach kids to code&rdquo; movement, which I see as complementary to my own objections; while I was arguing that it&rsquo;s pointless to teach kids to code when they won&rsquo;t be <em>allowed</em> to apply that skill, the EdSurge piece points out the absurdity of teaching kids to code without giving concrete opportunities to apply the ability.</p>

<p>Essentially, it comes down to the same thing: coding is wonderful, but if it&rsquo;s not applied to a real-world problem, it&rsquo;s a waste of resources.</p>

<p>I learned BASIC so I could make my screen draw pictures. That&rsquo;s great for a five year old. But I learned C so I could make my printer work with Linux; I learned Perl so I could type fewer commands into the shell; I learned PHP and SQL to build websites, and I learned Ruby because PHP sucks. I learned Scheme because I wanted to hack my way through SICP, and I learned Clojure because I wanted to do concurrent programming without mutexes. There was always a reason, a purpose, an application.</p>

<p>If we want kids to code, we must not only allow them to apply that knowledge whenever and wherever the opportunity arises, we must also train teachers to always and everywhere encourage the application of computational thinking (as well as programming) to whatever problem set presents itself as a viable candidate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm An Estuarian!]]></title>
    <link href="http://decomplecting.org/blog/2013/05/14/im-an-estuarian/"/>
    <updated>2013-05-14T23:40:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/05/14/im-an-estuarian</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, because the last few weeks have been just a little crazy.</p>

<p>I&rsquo;ve left <a href="http://www.jhu.edu">JHU</a>, and accepted the role of Chief Technology Officer at <a href="http://anestuary.com">An Estuary</a>, an amazing EdTech startup spun out from Baltimore&rsquo;s <a href="http://www.digitalharborfoundation.org/">Digital Harbor Foundation</a>.</p>

<p>It&rsquo;s kinda crazy going from a massive institution with about 40k employees, to a startup. But we&rsquo;re building amazing things, iterating like crazy, and having an unbelievable amountof fun doing it.</p>

<p>So stay on the lookout for An Estuary&hellip; the sky&rsquo;s the limit, folks. I&rsquo;d forgotten what it was like to wake up in the morning and being excited to get to work. Now I remember. It&rsquo;s an amazing feel, and this is an amazing time. And I work with the <a href="http://anestuary.weebly.com/1/post/2013/05/a-great-team.html">best people I could hope to work with.</a></p>

<p>Life is good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Willing To Let Go; or, "The Big Rewrite"]]></title>
    <link href="http://decomplecting.org/blog/2013/04/05/be-willing-to-let-go/"/>
    <updated>2013-04-05T02:10:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/04/05/be-willing-to-let-go</id>
    <content type="html"><![CDATA[<blockquote><p>Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to always see it as a soap bubble?</p><footer><strong>Alan J. Perlis</strong></footer></blockquote>


<p>One of the most nerve-wracking things you can tell a manager is that it&rsquo;s time to rewrite a major software component, system, or application. In fact, it&rsquo;s considered (in some circles) such a mortal sin that Joel Spolsky addresses &ldquo;The Big Rewrite&rdquo; in a post entitled <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">Things You Should Never Do, Part I</a>.</p>

<p>In many cases, he&rsquo;s absolutely right. If you have a working-ish production codebase, throwing it out the window can seem a bit like throwing out the baby with the bathwater. But from an engineering standpoint, software is weird. On the one hand, you have the engineering side: If a bridge is just working-ish, the assessment of a structural engineer might be that it must be torn down and a new bridge built in its place. Software is much more ethereal and abstract; of course, we can continue to patch the old application, and extend it, and patch it, and sacrifice virgins to Great Cthulhu, and keep it chugging along. For a while.</p>

<p>Eventually, however, with a typical enormous, legacy codebase, you just end up mortgaging massive technical debt.</p>

<!--more-->


<h3>Refinancing and Bankruptcy</h3>

<p>A large, enterprise-y system will usually be so entrenched in technical debt that we can (metaphorically) view it as being double- and triple-mortgaged. Test coverage is spotty (if it even exists), and more time is spent dealing with regressions than actually implementing new features in a sane manner.</p>

<p>Eventually, technical debt piles to the point at which it&rsquo;s time to claim bankruptcy. And the problem is that the beancounters financing software projects (or IT managers who have no business managing software projects) see it as bankruptcy in the traditional sense.</p>

<p>If the original project was poorly architected, rife with Demeter violations and cross-dependencies, coupled with lousy (or no) test coverage, this might be a somewhat accurate assessment. But sometimes a project with a sensible class hierarchy, composable elements, and a modular structure needs &ldquo;The Big Rewrite&rdquo;, and it becomes difficult to explain what this really entails.</p>

<h3>Reusable code</h3>

<p>I&rsquo;m thinking about this in terms of a Rails app that I built some time ago, which really should have been considered a &ldquo;throwaway prototype&rdquo;, except that the business needs dictated it went into production right away. It works, but&hellip; lousy test coverage, bizarre performance issues, and regression issues make each new deploy a new headache.</p>

<p>It took me some time, but I&rsquo;ve finally made the argument for the &ldquo;big rewrite.&rdquo;</p>

<p>Now, in the mean time, I&rsquo;ve created a REST API for the backend as part of an SOA for the systems involved. And I&rsquo;ve demonstrated that much of the model layer from the &ldquo;deprecated&rdquo; application was reused (or improved) for the API that I&rsquo;m using to abstract the intrface to the legacy system the inital application was designed to interface with.</p>

<p>The &ldquo;big rewrite&rdquo; entails rebuilding the tools in the old application to work through the API instead of directly hitting the DB (an Oracle monstrosity with ~500 tables and an incomprehensible collection of package functions and stored procedures). But the code was reusable in a new context, and the &ldquo;rewrite&rdquo; is really a protracted refactoring and rebuilding of the data layer.</p>

<h3>That Lisp Thing</h3>

<p>The quote at the head of this article was taken from the preface to the second edition of <a href="http://mitpress.mit.edu/sicp/">The Structure and Interpretation of Computer Programs</a>, aka the &ldquo;Wizard Book.&rdquo; SICP uses the Scheme dialect of Lisp for its examples, and Lisp is a beautiful language for writing composable code, as well as disposable code. It simply <em>makes sense</em> to write small, composable functions, and to use those functions to build abstractions for higher-level programming. This is what Paul Graham calls <a href="http://www.paulgraham.com/progbot.html">Programming Bottom-Up</a>.</p>

<p>I think when Rails programming is done well, it has a similar bottom-up aspect, in that one starts with the data model, then deals with the controllers, and the views are the final consideration. Certainly not everyone approaches Rails development from this perspective, but I think the best Rails apps exhibit this approach. The Windows development model of &ldquo;Visual Foo&rdquo; and &ldquo;Big Design Up Front&rdquo; are the anithesis, and I think this is why most Windows programs are terrible, and why Windows programmers are (in my experience) more likely to be okay with terrible code.</p>

<h3>Lewis&rsquo;s First Rule</h3>

<p><span class='pullquote-right' data-pullquote='All application code must be either composable or disposable.'></p>

<p>I&rsquo;ve never even thought to come up with a &ldquo;rule&rdquo; of software design before, but this is the most important lesson I&rsquo;ve learned in my 26 or so years of hobbyist, amateur, and professional software development. I think it&rsquo;s more important than any single design pattern (although many of the patterns in the Gang of Four book embody this rule), architectural principle, or other aphorism (excpet, of course, for <a href="http://en.wikipedia.org/wiki/Hanlon's_razor">Hanlon&rsquo;s Razor</a>, but that extends beyond software). Lewis&rsquo;s First Rule is simply this: All application code must be either composable or disposable. By composable, I inherently imply &ldquo;reusable.&rdquo; This is at the heart of the Go4 directive to &ldquo;favor composition over inheritance.&rdquo; But I also want to insist that getting rid of code is okay. It&rsquo;s not only okay, it&rsquo;s downright <em>desirable.</em> There&rsquo;s no greater feeling than a git commit that reads <code>2 files changed, 4 insertions(+), 232 deletions(-)</code>. It&rsquo;s even better when entire files have been deleted.</p>

<p></span></p>

<h3>Don&rsquo;t Fear The Rewrite</h3>

<p>A rewrite is only a scary proposition when you&rsquo;re working with a codebase that never had a guiding architectural principle to begin with, has no test coverage, and has never seen a refactoring; it&rsquo;s just years (maybe decades) of cruft, layered like a forest floor, with fresh leaves falling upon detritus, duff, finally decomposing into the humus that forms the core of the system, where only earthworms dare to tread.</p>

<p>Building long-lasting software is an admirable goal, but it&rsquo;s foolhardy to think we can do this at the application level, especially as the rate of technological progress continues to exponentiate. When you do something really good, rip it out of the application, build a library, and include that. Wash, rinse, repeat. Software should be composable, or disposable. There is no in-between.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Difficulty of Chaotic Good]]></title>
    <link href="http://decomplecting.org/blog/2013/04/02/the-difficulty-of-chaotic-good/"/>
    <updated>2013-04-02T22:29:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/04/02/the-difficulty-of-chaotic-good</id>
    <content type="html"><![CDATA[<p>So in a delightful twist, Michael O. Church has brought in the concept of D&amp;D <a href="http://michaelochurch.wordpress.com/2013/03/18/gervais-macleod-11-alignment-and-careers/">ethical alignments</a> to the corporate hierarchy/career discussion.</p>

<p>He quite correctly places the &ldquo;Technocrat&rdquo;, i.e., the &ldquo;postive sociopath&rdquo;, or the person who wants to accomplish something beneficial without regard to corporate politics or any other tangential concerns, in the &ldquo;chaotic good&rdquo; (or at least, &ldquo;neutral good&rdquo;) category.</p>

<p>I&rsquo;ve seen myself as &ldquo;chaotic good&rdquo; long before this series of posts, or before I ever thought of applying the D&amp;D alignment categories to roles at work. It fits with my politics (anarchist-communist), with my gneral M.O. of getting things done (open source is always bettter, and it&rsquo;s always easier to ask for forgiveness than to get permission). It also fits with my general attitude toward work: if you want something brilliant, tell me what you want and get the fuck out of my way. If you want a mess, keep letting middle managers stick their fingers in the pie of my creative process.</p>

<p>Church makes an excellent point, though, that the &ldquo;technocrat&rdquo; disposition, and the alignments it tends to entail (chaotic good to chaotic neutral) tend to be notoriously difficlut to manage. The only thing I think is missing from the series he&rsquo;s been doing on this issue is that if you&rsquo;re a programmer, <a href="http://www.paulgraham.com/boss.html">you weren&rsquo;t meant to have a boss</a>.</p>

<!--more-->


<p>That being said, let me say something for the chaotic good among us. Our ethical alignment is to the good, and this is not negotiable. Compare this to most senior managers and executives, who tend to (and I would argue almost universally) have the diametrically opposed alignment of <a href="http://michaelochurch.wordpress.com/2013/03/17/gervais-macleod-10-the-pull-of-lawful-evil/">lawful evil</a>. But not only is our ethical alignment to the good (altruistic), but our civil alignment is chaotic &ndash; we distrust and generally want to destroy instutions, whereas our superiors/arch-nemeses derive their only claims to power (there&rsquo;s certainly no there there when it comes to intelligence or any other &ldquo;natural&rdquo; claims to leadership) from their sociopathic rise through the entrenched hierarchy of rank culture institutions.</p>

<p>So, as Mr. Church has astutely observed, in terms of ethical alignment, Technocrats and Psychopaths (the two types of &ldquo;MacLeod Sociopaths&rdquo;) are as opposite as opposite can be. The &ldquo;Psychopaths&rdquo; (most corporate executives, because of the nature of the corporation in this day and age) are Lawful Evil: Completely self-interested, but with a faith in institutions because of their ability to further that self interest; The Technocrats, tending toward Chaotic Good, are the precise opposite; we want to make the world better, and have a strong distrust, if not contempt for, institutions, because we view them as invariably corrupting and subverting the good to which we are committed.</p>

<p>I&rsquo;ll refer you to the above-cited post from Michael Church, or your local AD&amp;D manual for more detail on alignment.</p>

<p>I&rsquo;m remembering a quote from Battlestar Galactica (Reimagined). I can&rsquo;t remember whether it&rsquo;s Apollo or Bill Adama, but there&rsquo;s a quote along the lines of, &ldquo;In the military, we often refer to the &lsquo;situation on the ground.&rsquo;&rdquo;</p>

<p>The situation on the ground is that lawful evil is generally more evolutionarily fit an alignment within the typical rank organization than chaotic good. The typical organization is true neutral: neither moral nor civil axes factor into its actions or disposition; the goal of the organization is to further the goals of the organization. Applied to the individual, this disposition would probably lead to an alignment of lawful evil. But as we factor in the impersonal nature of the organization (leaving out the legal fiction of &ldquo;corporate personhood&rdquo;), we end with a truly neutral disposition.</p>

<p>The true neutral is as willing to leverage the talents of the full span of the alignment spectrum; if a lawful evil individual serves its executive interests, and a chaotic good individual serves its creative interests, it will attempt to leverage both in the interest of organizational goals. The tragic flaw comes in not accepting that the two are incompatible. The lawful evil (who see the hierarchical organization as a pragmatic tool for personal gain) and the chaotic good (who see the hierarchical organization as an invariably corrupt obstacle to human progress) cannot, in the long term, successfully collaborate. In the short term, our goals may align, and we may achieve great things together. The lawful evil executive may be able to achieve accolades while the chaotic good programmer is allowed latitude to innovate; but the risk-aversion of the massive, neutral insitution prefers the disposition of the lawful evil position because it&rsquo;s predictable.</p>

<p>Chaotic good is harder to predict. It&rsquo;s also harder to fit into an organization of &ldquo;normals.&rdquo; By &ldquo;normals&rdquo; I mean the people still doing concave work in a world where concave work is in economic hospice.</p>

<p>So how can the chaotic-good aligned of us survive in a corporate environment? Maybe we shouldn&rsquo;t.</p>

<p>Perhaps doing so is a pathetic concession to necessity until a better opportunity presents itself.</p>

<p>This is perhaps a set intersection of the MacLeod &ldquo;Loser&rdquo; and the Church/MacLeod &ldquo;Technocrat&rdquo; (Church&rsquo;s &ldquo;good&rdquo; version of the MacLeod &ldquo;sociopath&rdquo;); Being strategic typically refusing Pyrrhic victories; sometimes it means staying a &ldquo;Loser&rdquo; until you can assess whether up or out is a more likely/possible/effective strategic move.</p>

<p>The worst part is finding oneself in such an environment with a number of kindred spirits, with whom one works exceedingly well. It&rsquo;s terrible to be forced to decide to leave something you love just because the chaotic good (us) can&rsquo;t tolerate the lawful evil (them). But neither can they tolerate us, for long, once it becomes apparent that our alignments will neither allow us to become allies, nor even to use one another to achieve our divergent ends. But it happens, time and time again. I&rsquo;ve seen D&amp;D parties split over the incompatibility of alignment in the player characters. Why should the modern corporation be any different?</p>

<p>So what&rsquo;s the solution? I really can&rsquo;t say. When it comes down to it, I believe that good will win, chaotic or otherwise. And I really only have faith in the chaotic or neutral good; lawful good is too much of a compromise, and tends to degrade into neutrality due to its civil alignment.</p>

<p>Who knows. I truly wish that every organization could be productive and effective. But there&rsquo;s an old saying that a small organization is ruled by the creatives, a medium-sized one is ruled by the bankers, and a large one is ruled by the lawyers. When it reaches that point, we&rsquo;re discussing an organization so averse to risk that innovation or any sort of worthwhile effort is out of the question. It&rsquo;s a shame, but that&rsquo;s the reality.</p>

<p>So what to do? I don&rsquo;t know. I don&rsquo;t have answers. Yet. But I&rsquo;m still thinking this through as well as working it through IRL. My hope is that there&rsquo;s an answer for every organization, but there&rsquo;s also that whole &ldquo;building a new world from the ashes of the old&rdquo; element that occasionally precludes evolutionary progress and demands revolutionary progress. Which are we facing here?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Donglegate, Inclusionary Culture, Nerd Culture]]></title>
    <link href="http://decomplecting.org/blog/2013/03/23/donglegate/"/>
    <updated>2013-03-23T21:33:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/03/23/donglegate</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve taken my time in writing about this. I had some debates (for better or worse) on Twitter, and some rather thoughtful meatspace conversations with friends and coworkers. I have strong feelings about what happened at PyCon (re: the donglegate scenario), and many of them are conflicting. So I&rsquo;ve waited to write about it until now.</p>

<h3>Donglegate</h3>

<p>Okay, for one thing, I really think the <a href="https://twitter.com/search?q=%23donglegate&amp;src=typd">#donglegate</a> hashtag/label is stupid, but that&rsquo;s not up to me, so whatever. I would like to address the way in which things were handled at PyCon, so here goes.</p>

<p>First off, I have no personal investment in what happens at PyCon. I don&rsquo;t really code in Python, I don&rsquo;t particularly like Python, whatever. But when people are publicly humiliated, fired, whatever, over things that are basically stupid, it chafes.</p>

<p>So, if you&rsquo;re unfamiliar (fat chance), you can get the original interpretation of events from the horse&rsquo;s mouth, at <a href="http://butyoureagirl.com/14015/forking-and-dongle-jokes-dont-belong-at-tech-conferences/">Adria Richards&#8217; blog</a> Hopefully that link works for you, I got yet another error trying to load it&hellip; maybe someone should tell her about <a href="http://decomplecting.org/blog/2012/07/04/static-is-beautiful/">static pages for blogs</a>. Anyhow, here&rsquo;s the short version: a &lsquo;developer relations rep&rsquo; from <a href="http://sendgrid.com/">SendGrid</a> was offended by some off-color comments made by some guys sitting behind her that apparently referenced &ldquo;big dongles.&rdquo; She also alleged some sexual references to &ldquo;forking,&rdquo; which has since been <a href="http://pastebin.com/JaNh0w5F">called into question</a>. Instead of saying to the individuals in question, &ldquo;Stop being jerks and shutup so I can listen to the speech,&rdquo; she tweeted pics of the guys who were making dongle jokes, and got the PyCon organizers involved.</p>

<p>I&rsquo;m not judging at this point.</p>

<p>Anyhow, once the PyCon organizers got involved, the folks she accused were removed from the session. Apparently, at least one lost his job.</p>

<p>Of course, it blew up on the Intertweets, with 4chan getting involved at some point and anons starting a <a href="https://www.change.org/petitions/sendgrid-please-fire-adria-richards">Change.org petition</a> to have her fired.</p>

<p>Adria Richards tweeted that SendGrid supported her:</p>

<blockquote class="twitter-tweet"><p>Hey @<a href="https://twitter.com/mundanematt">mundanematt</a>, it&#8217;s clear from the last 24 hours you&#8217;re a bully.@<a href="https://twitter.com/sendgrid">sendgrid</a> supports me.Stop trolling.</p>&mdash; Adria Richards (@adriarichards) <a href="https://twitter.com/adriarichards/status/314452708549603328">March 20, 2013</a></blockquote>


<script async src="http://decomplecting.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Apparently, she was mistaken, because she was fired shortly thereafter.</p>

<h3>Constructive Intervention</h3>

<p>I&rsquo;m still replaying this in my head. Some dudes were making immature, inappropriate comments at a conference. Ms. Richards responded in a way that was also immature and inappropriate.</p>

<p>I&rsquo;m not going to go into the distasteful, violent, or threatening responses that occurred on Twitter or 4chan (although, regarding hte latter, it&rsquo;s <em>4chan.</em> What do you expact?).</p>

<p>I would like to point out that the women from <a href="http://ladycoders.com">LadyCoders</a> proposed a system for dealing with this sort of occurence that <em>is</em> constructive. Expanding upon the <a href="http://singlevoice.net/redyellow-card-project/">Red/Yellow Card Project from Defcon</a>, they&rsquo;ve developed <a href="http://thecowgirlcoder.com/2013/03/21/pycon-code-of-conduct-warning-cards/">PyCon CoC warning cards</a> for next year&rsquo;s PyCon. I think it&rsquo;s a great constructive way to give people a way to address behaviour which they find offensive without resorting to the Twitter equivalent of tar-and-feathering, as Richards took as a first resort.</p>

<h3>And So&hellip;</h3>

<p>If anything, there was more logical reason for Richards to lose her job than the developer from PlayHaven. He was a developer; developers have never been known for tact or maturity. Richards&#8217; title was &ldquo;developer evangelist&rdquo;; I&rsquo;d like to know how she expected to carry out that role after alienating so many developers with her actions.</p>

<p>But whatever. PyCon has amended its CoC to condemn &ldquo;public shaming&rdquo; as a mode of dealing with inappropriate conduct. For my part, I see the whole PyCon / #donglegate debacle as an example of public stupidity on multiple parts, not a call to action. Let&rsquo;s just all try to be smarter in future, mmkay?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Farewell, Reader; Or, The Problem with "Free as in Beer"]]></title>
    <link href="http://decomplecting.org/blog/2013/03/16/farewell/"/>
    <updated>2013-03-16T00:45:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/03/16/farewell</id>
    <content type="html"><![CDATA[<p>I&rsquo;m <a href="http://support.google.com/reader/answer/3028851">going to miss Google Reader</a>. I know a lot of people are going to. Hell, in a crazy inversion of Godwin&rsquo;s Law, even <a href="http://www.youtube.com/watch?v=A25VgNZDQ08">Hitler is upset</a>. There&rsquo;s a <a href="https://www.change.org/en-GB/petitions/google-do-not-remove-google-reader-on-july-1-2013">petition on Change.org</a>, and Bender is pissed:</p>

<p><img class="center" src="http://decomplecting.org/images/post-img/bender-reader.png"></p>

<p>I&rsquo;ve been complaining, both online and in person, ever since I learned of this a couple of days ago. And it&rsquo;s not the first time I&rsquo;ve <a href="http://decomplecting.org/blog/2012/06/06/hackers-need-our-own-everything/">complained about changes at Google</a>.</p>

<p>This isn&rsquo;t even <a href="http://en.wikipedia.org/wiki/Tragedy_of_the_commons">the tragedy fo the commons</a>; this is the tragedy of <a href="http://en.wikipedia.org/wiki/Gratis_versus_libre">gratis versus libre</a>, or &ldquo;free as in beer&rdquo; versus &ldquo;free as in speech.&rdquo;</p>

<p>Sure, Reader is one of Google&rsquo;s most popular products, at least among my (admittedly strange) peer group. But I&rsquo;m going to assert something odd for a wacky leftist like me: Google is a for-profit corporation, beholden to its shareholders. It has a responsibility to monetize its products, and Google is (in simple terms) in the advertising business. Reader wasn&rsquo;t selling ads, as far as I can tell.</p>

<p>We can drill a little deeper, and say that Google is really in the <em>data</em> business. But even at this level, I can guess the prediction of the highly complex and optimized machine learning algorithms Google has developed for all the data it harvests, when applied to Reader:</p>

<h4>Nerds like reading one anothers&#8217; blogs.</h4>

<p>Yeah, um&hellip; I don&rsquo;t know how they failed to monetize that highly proprietary and unexpected insight.</p>

<!--more-->


<p>I&rsquo;m going to miss Google Reader. It was an extremely well-built, easy to use RSS/Atom feed aggregator that made my toilet reading much more manageable.</p>

<p>But the lesson here is the one I missed (or ignored) last year when Google introduced the changes to Search that made it more difficult for me to find pertinent results to highly complex, technical queries, and I kvetched on this blog.</p>

<p>I still stand by my position that <a href="http://decomplecting.org/blog/2012/06/06/hackers-need-our-own-everything/">hackers need our own everything</a>, but my new conclusion is that it was a mistake to rely on a corporation like Google in the first place, if the tool in question really mattered.</p>

<p>It would be like a carpenter relying on a hammer (and saw, plane, screwdriver, etc.) provided by some external entity who could swoop in and remove or alter any of those tools at any time. Such a carpenter would be a fool, at least if he didn&rsquo;t leverage those tools while he had them to build a set of replacements.</p>

<p>I&rsquo;m not saying building a replacement for Google Search is something within the reach of any one (or one hundred) of us disgruntled hackers. But the upside of the Reader debacle is that it showed me what I really do (and don&rsquo;t) want from a feed aggregator, and now <a href="https://github.com/canweriotnow/reajer">I&rsquo;m building my own</a>. I&rsquo;ve spent about 30 minutes on it so far, so how much is there when you click that link will likely be quite time dependent, but I&rsquo;m learning more Clojure while scratching an itch (an itchy Google bite, to be exact), so I don&rsquo;t see a major downside to spending time on it.</p>

<p>Fundamentally, it would be nice if we could rely on Google&rsquo;s stated policy of &ldquo;Don&rsquo;t be evil&rdquo; to keep us supplied with the tools to which we have become accustomed. But by the general standard of socially acceptable evil, Google isn&rsquo;t really being evil, just kinda douchey.</p>

<p>Until there&rsquo;s a company that can remain profitable while adhering to a &ldquo;don&rsquo;t be a douche&rdquo; standard, hackers still need our own everything. Normal people will too, I guess.</p>

<p>But Reader was always &ldquo;free as in beer,&rdquo; not &ldquo;free as in speech,&rdquo; so it was always the prerogative of the douche with the keg to call &ldquo;last call,&rdquo; to kick everyone out, or at least to take his tap and go home.</p>

<p>So go ahead and sign the petition on <a href="http://change.org">Change.org</a>, watch the &ldquo;Hitler Finds Out&rdquo; video (actually, please watch that one&hellip; it&rsquo;s both accurate and hilarious), but don&rsquo;t be surprised the next time Google takes your favorite toy away.</p>

<p>P.S. I haven&rsquo;t added blackjack <em>or</em> hookers to <a href="https://github.com/canweriotnow/reajer">reajer</a>, but it does play Tetris. So there&rsquo;s that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of The "IT Department"]]></title>
    <link href="http://decomplecting.org/blog/2013/03/15/the-myth-of-the-it-department/"/>
    <updated>2013-03-15T01:53:00-04:00</updated>
    <id>http://decomplecting.org/blog/2013/03/15/the-myth-of-the-it-department</id>
    <content type="html"><![CDATA[<p>So in the comments on my <a href="http://decomplecting.org/blog/2013/03/11/confessions-of-a-job-destroyer/">last post</a> I mentioned my fandom for what is, in my opinion, the most insightful and important blog currently published, that of <a href="http://michaelochurch.wordpress.com/">Michael O. Church</a>. His recent series of posts have been reviewing and analyzing the MacLeod theory of <a href="http://michaelochurch.wordpress.com/2013/03/14/gervais-macleod-9-convexity/">organizational structure</a> (link is to the latest post in the series, but if you haven&rsquo;t been following it, therein are links to the previous eight).</p>

<p>I want to focus on the differential between concave (in which the difference between failure and middling is greatest) and convex (in which the difference between middling and superior is greatest) work.</p>

<h3>The &ldquo;IT Department&rdquo;</h3>

<p>I have to start by saying &ldquo;Information Technology&rdquo; is a leaky abstraction. It covers everything from internal software development to the help desk call center. I&rsquo;m not suggesting that either line of business is superior. Both are absolutely necessary, at least until developers start to become psychic or users stop being stupid, or (preferably) both.</p>

<p>The real problem comes when the same management structure is imposed in the guise of an &ldquo;IT Department&rdquo; on such divergent areas as the help desk, desktop support, network engineers, developers, and hardware techs. Going beyond theories <a href="http://michaelochurch.wordpress.com/2013/03/12/gervais-macleod-8-human-nature-theories-x-y-z-and-a/">X, Y, Z, or A</a> of management, having a &ldquo;Central IT&rdquo; department is (without a revolutionary management strategy that will probably raise HR issues for most entrenched organizations) an attempt to shoehorn concave and convex work into the same tiny box, and is going to fail at appropriately managing one or the other (or perhaps more likely, both).</p>

<!--more-->


<h3>Concave Work</h3>

<p>Let&rsquo;s face it, help desk work is typically concave. I&rsquo;ve done it (briefly), and it&rsquo;s probably an acceptable use case for <a href="http://en.wikipedia.org/wiki/Theory_X_and_Theory_Y#Theory_X">Theory X</a>, since it&rsquo;s (in this writer&rsquo;s opinion) rote, unrewarding work that I would <a href="http://decomplecting.org/blog/2013/03/11/confessions-of-a-job-destroyer/">automate out of existence</a> if I had the time and resources. But, it&rsquo;s also necessary work, and a place where &ldquo;managing to the middle&rdquo; works because achieving the Socially Acceptable Middling Effort (SAME) is a decent departmental average.</p>

<p>I&rsquo;d place much of the responsibility of the average sub-division of IT in the scope of &ldquo;concave work.&rdquo;  Desktop support, Windows administration, etc., are really about uniformity of outcome, and SAME is an acceptable goal.</p>

<p>When it comes to efforts like software development, or big data, or even &ldquo;cloud services&rdquo;, SAME is the same as failure. We&rsquo;re now into the realm of convex work, and the standard has to be different.</p>

<h3>Convex Work</h3>

<p>I&rsquo;ve <a href="http://decomplecting.org/blog/2012/10/31/feedback-loops/">written before</a> about how programmers are just <em>weird</em> from a standard, organizational point of view. Or any standard point of view. Programming is the ultimate convex work; from Joel Spolsky&rsquo;s warnings about <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">The Perils of Java Schools</a>, to Jeff Atwood&rsquo;s plea that <a href="http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html">not everyone learn to code</a>, it&rsquo;s clear that not only is programming a highly specialized thing to excel at, but also that there are <a href="http://www.codinghorror.com/blog/2006/07/separating-programming-sheep-from-non-programming-goats.html">certain factors that determine capability in advance</a>.</p>

<p>It&rsquo;s probably the epitome of convex work. The difference between the worst programmer and the middling programmer is a fraction of the difference between a middling programmer and (even) a 90th percentile-or-above programmer. And there are probably other areas in IT where this is true; from my experience I&rsquo;d say they&rsquo;re in software-heavy areas like managing large datasets properly, or providing true &ldquo;cloud services&rdquo;, i.e., computing and storage in a multi-tenancy environment with computation and storage as a metered service. I haven&rsquo;t seen any of these done well in an &ldquo;enterprise&rdquo; environment.</p>

<h3>The Enterprise</h3>

<p>The &ldquo;enterprise&rdquo; only works by &ldquo;managing to the middle.&rdquo; Which explains the self-defeating attitutdes of vendor lock-in and risk aversion. When you&rsquo;re not in a &ldquo;tech company,&rdquo; IT is invariably a &ldquo;cost center,&rdquo; which a) is why <a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/">you shouldn&rsquo;t call yourself a programmer</a> (obligatory reference), and b) why it needs to maintain a low-risk profile. When you work for a large organization, &ldquo;low-risk&rdquo; means &ldquo;the buck stops elsewhere than my desk.&rdquo;  So there needs to be a vendor to blame. So much of the acknowledged efforts will be in contract negotiations for the purchase of almost-suitable software from an established vendor, that doesn&rsquo;t really meet the needs of the organization, but can be marginally tweaked to fit by middling engineers.</p>

<p>It also means that internal innovation can&rsquo;t be acknowledged or rewarded too highly. When most of your &ldquo;software teams&rdquo; are doing maintenance on the last failed vendor purchase, how can you be seen to give accolades to the projects which have truly broken new ground?</p>

<p>At the same time, do you <em>want</em> front line support innovating to that degree? Sure, if one of your help desk reps replaces some annoying customer interaction with a Perl script, they&rsquo;ll either be promoted to convex work, or fired from concave work, right? I think this only reinforces the difference between the two categories.</p>

<h3>Programmer, Wat Do?</h3>

<p>That&rsquo;s where the <a href="http://michaelochurch.wordpress.com/2013/02/19/gervais-principle-questioned-macleods-hierarchy-the-technocrat-and-vc-startups/">MacLeod Paradigm</a> really comes into play again&hellip; when most of your developers are 9-to-5ers who <a href="http://decomplecting.org/blog/2012/05/22/passion/">take no joy in their craft</a>, you have a team of MacLeod &ldquo;losers,&rdquo; which fits perfectly well into the &ldquo;enterprise&rdquo; IT paradigm. It&rsquo;s hard to practice something sensible like <a href="http://michaelochurch.wordpress.com/2012/11/25/programmer-autonomy-is-a-1-trillion-issue/">open allocation</a> when you manage business analysts in the same manner as developers.</p>

<p>If you really care about good, clean, beautiful, (even) elegant code, well&hellip; you might luck out. I&rsquo;m on a small team which is probably considered &ldquo;rogue&rdquo; by most &ldquo;enterprise&rdquo; standards. I love my job, and it affords me significant autonomy and creative freedom, but I also know how bizarre and rare that is. I don&rsquo;t see how &ldquo;non-technical organizations&rdquo; (a future post will debate whether such a thing exists anymore) can afford to treat developers&#8217; work the same as concave work without having the whole house of cards come tumbling down at some point.</p>
]]></content>
  </entry>
  
</feed>
